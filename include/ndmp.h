/*
 * Copyright 2009 Sun Microsystems, Inc.  
 * Copyright 2015 Marcelo Araujo <araujo@FreeBSD.org>.
 * All rights reserved.
 *
 * Use is subject to license terms.
 */

/*
 * BSD 3 Clause License
 *
 * Copyright (c) 2007, The Storage Networking Industry Association.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *      - Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *
 *      - Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in
 *        the documentation and/or other materials provided with the
 *        distribution.
 *
 *      - Neither the name of The Storage Networking Industry Association (SNIA)
 *        nor the names of its contributors may be used to endorse or promote
 *        products derived from this software without specific prior written
 *        permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NDMP_H_RPCGEN
#define	_NDMP_H_RPCGEN

#include <rpc/rpc.h>

#ifdef __cplusplus
extern "C" {
#endif

#define	NDMPV2 2
#define	NDMPV3 3
#define	NDMPV4 4
#define	NDMPVER NDMPV4
#define	NDMPPORT 10000

struct ndmp_u_quad {
	u_long high;
	u_long low;
};
typedef struct ndmp_u_quad ndmp_u_quad;

struct ndmp_pval {
	char *name;
	char *value;
};
typedef struct ndmp_pval ndmp_pval;

struct ndmp_scsi_device {
	char *name;
};
typedef struct ndmp_scsi_device ndmp_scsi_device;

struct ndmp_tape_device {
	char *name;
};
typedef struct ndmp_tape_device ndmp_tape_device;

enum ndmp_error {
	NDMP_NO_ERR = 0,
	NDMP_NOT_SUPPORTED_ERR = 1,
	NDMP_DEVICE_BUSY_ERR = 2,
	NDMP_DEVICE_OPENED_ERR = 3,
	NDMP_NOT_AUTHORIZED_ERR = 4,
	NDMP_PERMISSION_ERR = 5,
	NDMP_DEV_NOT_OPEN_ERR = 6,
	NDMP_IO_ERR = 7,
	NDMP_TIMEOUT_ERR = 8,
	NDMP_ILLEGAL_ARGS_ERR = 9,
	NDMP_NO_TAPE_LOADED_ERR = 10,
	NDMP_WRITE_PROTECT_ERR = 11,
	NDMP_EOF_ERR = 12,
	NDMP_EOM_ERR = 13,
	NDMP_FILE_NOT_FOUND_ERR = 14,
	NDMP_BAD_FILE_ERR = 15,
	NDMP_NO_DEVICE_ERR = 16,
	NDMP_NO_BUS_ERR = 17,
	NDMP_XDR_DECODE_ERR = 18,
	NDMP_ILLEGAL_STATE_ERR = 19,
	NDMP_UNDEFINED_ERR = 20,
	NDMP_XDR_ENCODE_ERR = 21,
	NDMP_NO_MEM_ERR = 22,
	NDMP_CONNECT_ERR = 23,
	NDMP_SEQUENCE_NUM_ERR = 24,
	NDMP_READ_IN_PROGRESS_ERR = 25,
	NDMP_PRECONDITION_ERR = 26,
	NDMP_CLASS_NOT_SUPPORTED_ERR = 27,
	NDMP_VERSION_NOT_SUPPORTED_ERR = 28,
	NDMP_EXT_DUPL_CLASSES_ERR = 29,
	NDMP_EXT_DANDN_ILLEGAL_ERR = 30
};
typedef enum ndmp_error ndmp_error;

enum ndmp_header_message_type {
	NDMP_MESSAGE_REQUEST = 0,
	NDMP_MESSAGE_REPLY = 1
};
typedef enum ndmp_header_message_type ndmp_header_message_type;

enum ndmp_message {
	NDMP_CONNECT_OPEN = 0x900,
	NDMP_CONNECT_CLIENT_AUTH = 0x901,
	NDMP_CONNECT_CLOSE = 0x902,
	NDMP_CONNECT_SERVER_AUTH = 0x903,
	NDMP_CONFIG_GET_HOST_INFO = 0x100,
	NDMP_CONFIG_GET_BUTYPE_ATTR = 0x101,
	NDMP_CONFIG_GET_CONNECTION_TYPE = 0x102,
	NDMP_CONFIG_GET_AUTH_ATTR = 0x103,
	NDMP_CONFIG_GET_BUTYPE_INFO = 0x104,
	NDMP_CONFIG_GET_FS_INFO = 0x105,
	NDMP_CONFIG_GET_TAPE_INFO = 0x106,
	NDMP_CONFIG_GET_SCSI_INFO = 0x107,
	NDMP_CONFIG_GET_SERVER_INFO = 0x108,
	NDMP_CONFIG_SET_EXT_LIST = 0x109,
	NDMP_CONFIG_GET_EXT_LIST = 0x10A,
	NDMP_SCSI_OPEN = 0x200,
	NDMP_SCSI_CLOSE = 0x201,
	NDMP_SCSI_GET_STATE = 0x202,
	NDMP_SCSI_SET_TARGET = 0x203,
	NDMP_SCSI_RESET_DEVICE = 0x204,
	NDMP_SCSI_RESET_BUS = 0x205,
	NDMP_SCSI_EXECUTE_CDB = 0x206,
	NDMP_TAPE_OPEN = 0x300,
	NDMP_TAPE_CLOSE = 0x301,
	NDMP_TAPE_GET_STATE = 0x302,
	NDMP_TAPE_MTIO = 0x303,
	NDMP_TAPE_WRITE = 0x304,
	NDMP_TAPE_READ = 0x305,
	NDMP_TAPE_SET_RECORD_SIZE = 0x306,
	NDMP_TAPE_EXECUTE_CDB = 0x307,
	NDMP_DATA_GET_STATE = 0x400,
	NDMP_DATA_START_BACKUP = 0x401,
	NDMP_DATA_START_RECOVER = 0x402,
	NDMP_DATA_ABORT = 0x403,
	NDMP_DATA_GET_ENV = 0x404,
	NDMP_DATA_RESVD1 = 0x405,
	NDMP_DATA_RESVD2 = 0x406,
	NDMP_DATA_STOP = 0x407,
	NDMP_DATA_CONTINUE = 0x408,
	NDMP_DATA_LISTEN = 0x409,
	NDMP_DATA_CONNECT = 0x40A,
	NDMP_DATA_START_RECOVER_FILEHIST = 0x40B,
	NDMP_NOTIFY_RESERVED = 0x500,
	NDMP_NOTIFY_DATA_HALTED = 0x501,
	NDMP_NOTIFY_CONNECTION_STATUS = 0x502,
	NDMP_NOTIFY_MOVER_HALTED = 0x503,
	NDMP_NOTIFY_MOVER_PAUSED = 0x504,
	NDMP_NOTIFY_DATA_READ = 0x505,
	_NDMP_LOG_LOG = 0x600,
	_NDMP_LOG_DEBUG = 0x601,
	NDMP_LOG_FILE = 0x602,
	NDMP_LOG_MESSAGE = 0x603,
	NDMP_FH_ADD_UNIX_PATH = 0x700,
	NDMP_FH_ADD_UNIX_DIR = 0x701,
	NDMP_FH_ADD_UNIX_NODE = 0x702,
	NDMP_FH_ADD_FILE = 0x703,
	NDMP_FH_ADD_DIR = 0x704,
	NDMP_FH_ADD_NODE = 0x705,
	NDMP_MOVER_GET_STATE = 0xA00,
	NDMP_MOVER_LISTEN = 0xA01,
	NDMP_MOVER_CONTINUE = 0xA02,
	NDMP_MOVER_ABORT = 0xA03,
	NDMP_MOVER_STOP = 0xA04,
	NDMP_MOVER_SET_WINDOW = 0xA05,
	NDMP_MOVER_READ = 0xA06,
	NDMP_MOVER_CLOSE = 0xA07,
	NDMP_MOVER_SET_RECORD_SIZE = 0xA08,
	NDMP_MOVER_CONNECT = 0xA09,
	NDMP_EXT_STANDARD_BASE = 0x10000,
	NDMP_EXT_PROPRIETARY_BASE = 0x20000000
};
typedef enum ndmp_message ndmp_message;


#define	NDMP_CONNECT_AUTH NDMP_CONNECT_CLIENT_AUTH
#define	NDMP_MESSAGE_POST NDMP_MESSAGE_REQUEST

struct ndmp_header {
	u_long sequence;
	u_long time_stamp;
	ndmp_header_message_type message_type;
	enum ndmp_message message;
	u_long reply_sequence;
	ndmp_error error;
};
typedef struct ndmp_header ndmp_header;

struct ndmp_connect_open_request {
	u_short protocol_version;
};
typedef struct ndmp_connect_open_request ndmp_connect_open_request;

struct ndmp_connect_open_reply {
	ndmp_error error;
};
typedef struct ndmp_connect_open_reply ndmp_connect_open_reply;

enum ndmp_auth_type {
	NDMP_AUTH_NONE = 0,
	NDMP_AUTH_TEXT = 1,
	NDMP_AUTH_MD5 = 2
};
typedef enum ndmp_auth_type ndmp_auth_type;

struct ndmp_auth_text {
	char *user;
	char *password;
};
typedef struct ndmp_auth_text ndmp_auth_text;

struct ndmp_auth_md5 {
	char *user;
	char auth_digest[16];
};
typedef struct ndmp_auth_md5 ndmp_auth_md5;

struct ndmp_auth_data {
	ndmp_auth_type auth_type;
	union {
		struct ndmp_auth_text auth_text;
		struct ndmp_auth_md5 auth_md5;
	} ndmp_auth_data_u;
};
typedef struct ndmp_auth_data ndmp_auth_data;

struct ndmp_connect_client_auth_request {
	ndmp_auth_data auth_data;
};
typedef struct ndmp_connect_client_auth_request ndmp_connect_client_auth_request;

struct ndmp_connect_client_auth_reply {
	ndmp_error error;
};
typedef struct ndmp_connect_client_auth_reply ndmp_connect_client_auth_reply;

struct ndmp_auth_attr {
	ndmp_auth_type auth_type;
	union {
		char challenge[64];
	} ndmp_auth_attr_u;
};
typedef struct ndmp_auth_attr ndmp_auth_attr;

struct ndmp_connect_server_auth_request {
	ndmp_auth_attr client_attr;
};
typedef struct ndmp_connect_server_auth_request ndmp_connect_server_auth_request;

struct ndmp_connect_server_auth_reply {
	ndmp_error error;
	ndmp_auth_data auth_result;
};
typedef struct ndmp_connect_server_auth_reply ndmp_connect_server_auth_reply;

struct ndmp_auth_text_v3 {
	char *auth_id;
	char *auth_password;
};
typedef struct ndmp_auth_text_v3 ndmp_auth_text_v3;

struct ndmp_auth_md5_v3 {
	char *auth_id;
	char auth_digest[16];
};
typedef struct ndmp_auth_md5_v3 ndmp_auth_md5_v3;

struct ndmp_auth_data_v3 {
	ndmp_auth_type auth_type;
	union {
		struct ndmp_auth_text_v3 auth_text;
		struct ndmp_auth_md5_v3 auth_md5;
	} ndmp_auth_data_v3_u;
};
typedef struct ndmp_auth_data_v3 ndmp_auth_data_v3;

struct ndmp_connect_client_auth_request_v3 {
	ndmp_auth_data_v3 auth_data;
};
typedef struct ndmp_connect_client_auth_request_v3 ndmp_connect_client_auth_request_v3;

struct ndmp_connect_client_auth_reply_v3 {
	ndmp_error error;
};
typedef struct ndmp_connect_client_auth_reply_v3 ndmp_connect_client_auth_reply_v3;

struct ndmp_config_get_host_info_reply {
	ndmp_error error;
	char *hostname;
	char *os_type;
	char *os_vers;
	char *hostid;
	struct {
		u_int auth_type_len;
		ndmp_auth_type *auth_type_val;
	} auth_type;
};
typedef struct ndmp_config_get_host_info_reply ndmp_config_get_host_info_reply;
#define	NDMP_NO_BACKUP_FILELIST 0x0001
#define	NDMP_NO_BACKUP_FHINFO 0x0002
#define	NDMP_NO_RECOVER_FILELIST 0x0004
#define	NDMP_NO_RECOVER_FHINFO 0x0008
#define	NDMP_NO_RECOVER_SSID 0x0010
#define	NDMP_NO_RECOVER_INC_ONLY 0x0020

struct ndmp_config_get_butype_attr_request {
	char *name;
};
typedef struct ndmp_config_get_butype_attr_request ndmp_config_get_butype_attr_request;

struct ndmp_config_get_butype_attr_reply {
	ndmp_error error;
	u_long attrs;
};
typedef struct ndmp_config_get_butype_attr_reply ndmp_config_get_butype_attr_reply;

enum ndmp_addr_type {
	NDMP_ADDR_LOCAL = 0,
	NDMP_ADDR_TCP = 1,
	NDMP_ADDR_FC = 2,
	NDMP_ADDR_IPC = 3
};
typedef enum ndmp_addr_type ndmp_addr_type;

struct ndmp_config_get_mover_type_reply {
	ndmp_error error;
	struct {
		u_int methods_len;
		ndmp_addr_type *methods_val;
	} methods;
};
typedef struct ndmp_config_get_mover_type_reply ndmp_config_get_mover_type_reply;

struct ndmp_config_get_auth_attr_request {
	ndmp_auth_type auth_type;
};
typedef struct ndmp_config_get_auth_attr_request ndmp_config_get_auth_attr_request;

struct ndmp_config_get_auth_attr_reply {
	ndmp_error error;
	ndmp_auth_attr server_attr;
};
typedef struct ndmp_config_get_auth_attr_reply ndmp_config_get_auth_attr_reply;

struct ndmp_config_get_host_info_reply_v3 {
	ndmp_error error;
	char *hostname;
	char *os_type;
	char *os_vers;
	char *hostid;
};
typedef struct ndmp_config_get_host_info_reply_v3 ndmp_config_get_host_info_reply_v3;

struct ndmp_config_get_connection_type_reply_v3 {
	ndmp_error error;
	struct {
		u_int addr_types_len;
		ndmp_addr_type *addr_types_val;
	} addr_types;
};
typedef struct ndmp_config_get_connection_type_reply_v3 ndmp_config_get_connection_type_reply_v3;

struct ndmp_config_get_server_info_reply_v3 {
	ndmp_error error;
	char *vendor_name;
	char *product_name;
	char *revision_number;
	struct {
		u_int auth_type_len;
		ndmp_auth_type *auth_type_val;
	} auth_type;
};
typedef struct ndmp_config_get_server_info_reply_v3 ndmp_config_get_server_info_reply_v3;
#define	NDMP_BUTYPE_BACKUP_FILE_HISTORY 0x0001
#define	NDMP_BUTYPE_BACKUP_FILELIST 0x0002
#define	NDMP_BUTYPE_RECOVER_FILELIST 0x0004
#define	NDMP_BUTYPE_BACKUP_DIRECT 0x0008
#define	NDMP_BUTYPE_RECOVER_DIRECT 0x0010
#define	NDMP_BUTYPE_BACKUP_INCREMENTAL 0x0020
#define	NDMP_BUTYPE_RECOVER_INCREMENTAL 0x0040
#define	NDMP_BUTYPE_BACKUP_UTF8 0x0080
#define	NDMP_BUTYPE_RECOVER_UTF8 0x0100
#define	NDMP_BUTYPE_BACKUP_FH_FILE 0x0200
#define	NDMP_BUTYPE_BACKUP_FH_DIR 0x0400
#define	NDMP_BUTYPE_RECOVER_FILEHIST 0x0800
#define	NDMP_BUTYPE_RECOVER_FH_FILE 0x1000
#define	NDMP_BUTYPE_RECOVER_FH_DIR 0x2000

struct ndmp_butype_info {
	char *butype_name;
	struct {
		u_int default_env_len;
		ndmp_pval *default_env_val;
	} default_env;
	u_long attrs;
};
typedef struct ndmp_butype_info ndmp_butype_info;

struct ndmp_config_get_butype_info_reply_v3 {
	ndmp_error error;
	struct {
		u_int butype_info_len;
		ndmp_butype_info *butype_info_val;
	} butype_info;
};
typedef struct ndmp_config_get_butype_info_reply_v3 ndmp_config_get_butype_info_reply_v3;
#define	NDMP_FS_INFO_TOTAL_SIZE_INVALID 0x00000001
#define	NDMP_FS_INFO_USED_SIZE_INVALID 0x00000002
#define	NDMP_FS_INFO_AVAIL_SIZE_INVALID 0x00000004
#define	NDMP_FS_INFO_TOTAL_INODES_INVALID 0x00000008
#define	NDMP_FS_INFO_USED_INODES_INVALID 0x00000010

struct ndmp_fs_info_v3 {
	u_long invalid;
	char *fs_type;
	char *fs_logical_device;
	char *fs_physical_device;
	ndmp_u_quad total_size;
	ndmp_u_quad used_size;
	ndmp_u_quad avail_size;
	ndmp_u_quad total_inodes;
	ndmp_u_quad used_inodes;
	struct {
		u_int fs_env_len;
		ndmp_pval *fs_env_val;
	} fs_env;
	char *fs_status;
};
typedef struct ndmp_fs_info_v3 ndmp_fs_info_v3;

struct ndmp_config_get_fs_info_reply_v3 {
	ndmp_error error;
	struct {
		u_int fs_info_len;
		ndmp_fs_info_v3 *fs_info_val;
	} fs_info;
};
typedef struct ndmp_config_get_fs_info_reply_v3 ndmp_config_get_fs_info_reply_v3;
#define	NDMP_TAPE_ATTR_REWIND 0x00000001
#define	NDMP_TAPE_ATTR_UNLOAD 0x00000002
#define	NDMP_TAPE_ATTR_RAW 0x00000004

struct ndmp_device_capability_v3 {
	char *device;
	u_long attr;
	struct {
		u_int capability_len;
		ndmp_pval *capability_val;
	} capability;
};
typedef struct ndmp_device_capability_v3 ndmp_device_capability_v3;

struct ndmp_device_info_v3 {
	char *model;
	struct {
		u_int caplist_len;
		ndmp_device_capability_v3 *caplist_val;
	} caplist;
};
typedef struct ndmp_device_info_v3 ndmp_device_info_v3;

struct ndmp_config_get_tape_info_reply_v3 {
	ndmp_error error;
	struct {
		u_int tape_info_len;
		ndmp_device_info_v3 *tape_info_val;
	} tape_info;
};
typedef struct ndmp_config_get_tape_info_reply_v3 ndmp_config_get_tape_info_reply_v3;

struct ndmp_config_get_scsi_info_reply_v3 {
	ndmp_error error;
	struct {
		u_int scsi_info_len;
		ndmp_device_info_v3 *scsi_info_val;
	} scsi_info;
};
typedef struct ndmp_config_get_scsi_info_reply_v3 ndmp_config_get_scsi_info_reply_v3;

struct ndmp_config_get_butype_info_reply_v4 {
	ndmp_error error;
	struct {
		u_int butype_info_len;
		ndmp_butype_info *butype_info_val;
	} butype_info;
};
typedef struct ndmp_config_get_butype_info_reply_v4 ndmp_config_get_butype_info_reply_v4;

struct ndmp_class_list {
	u_short ext_class_id;
	struct {
		u_int ext_version_len;
		u_short *ext_version_val;
	} ext_version;
};
typedef struct ndmp_class_list ndmp_class_list;

struct ndmp_class_version {
	u_short ext_class_id;
	u_short ext_version;
};
typedef struct ndmp_class_version ndmp_class_version;

struct ndmp_config_get_ext_list_reply {
	ndmp_error error;
	struct {
		u_int class_list_len;
		ndmp_class_list *class_list_val;
	} class_list;
};
typedef struct ndmp_config_get_ext_list_reply ndmp_config_get_ext_list_reply;

struct ndmp_config_set_ext_list_request {
	struct {
		u_int ndmp_selected_ext_len;
		ndmp_class_version *ndmp_selected_ext_val;
	} ndmp_selected_ext;
};
typedef struct ndmp_config_set_ext_list_request ndmp_config_set_ext_list_request;

struct ndmp_config_set_ext_list_reply {
	ndmp_error error;
};
typedef struct ndmp_config_set_ext_list_reply ndmp_config_set_ext_list_reply;

struct ndmp_scsi_open_request {
	ndmp_scsi_device device;
};
typedef struct ndmp_scsi_open_request ndmp_scsi_open_request;

struct ndmp_scsi_open_reply {
	ndmp_error error;
};
typedef struct ndmp_scsi_open_reply ndmp_scsi_open_reply;

struct ndmp_scsi_close_reply {
	ndmp_error error;
};
typedef struct ndmp_scsi_close_reply ndmp_scsi_close_reply;

struct ndmp_scsi_get_state_reply {
	ndmp_error error;
	short target_controller;
	short target_id;
	short target_lun;
};
typedef struct ndmp_scsi_get_state_reply ndmp_scsi_get_state_reply;

struct ndmp_scsi_set_target_request {
	ndmp_scsi_device device;
	u_short target_controller;
	u_short target_id;
	u_short target_lun;
};
typedef struct ndmp_scsi_set_target_request ndmp_scsi_set_target_request;

struct ndmp_scsi_set_target_reply {
	ndmp_error error;
};
typedef struct ndmp_scsi_set_target_reply ndmp_scsi_set_target_reply;

struct ndmp_scsi_reset_device_reply {
	ndmp_error error;
};
typedef struct ndmp_scsi_reset_device_reply ndmp_scsi_reset_device_reply;

struct ndmp_scsi_reset_bus_reply {
	ndmp_error error;
};
typedef struct ndmp_scsi_reset_bus_reply ndmp_scsi_reset_bus_reply;
#define	NDMP_SCSI_DATA_IN 0x00000001
#define	NDMP_SCSI_DATA_OUT 0x00000002

struct ndmp_execute_cdb_request {
	u_long flags;
	u_long timeout;
	u_long datain_len;
	struct {
		u_int cdb_len;
		char *cdb_val;
	} cdb;
	struct {
		u_int dataout_len;
		char *dataout_val;
	} dataout;
};
typedef struct ndmp_execute_cdb_request ndmp_execute_cdb_request;

struct ndmp_execute_cdb_reply {
	ndmp_error error;
	u_char status;
	u_long dataout_len;
	struct {
		u_int datain_len;
		char *datain_val;
	} datain;
	struct {
		u_int ext_sense_len;
		char *ext_sense_val;
	} ext_sense;
};
typedef struct ndmp_execute_cdb_reply ndmp_execute_cdb_reply;

struct ndmp_scsi_open_request_v3 {
	char *device;
};
typedef struct ndmp_scsi_open_request_v3 ndmp_scsi_open_request_v3;

struct ndmp_scsi_set_target_request_v3 {
	char *device;
	u_short target_controller;
	u_short target_id;
	u_short target_lun;
};
typedef struct ndmp_scsi_set_target_request_v3 ndmp_scsi_set_target_request_v3;

enum ndmp_tape_open_mode {
	NDMP_TAPE_READ_MODE = 0,
	NDMP_TAPE_WRITE_MODE = 1,
	NDMP_TAPE_RAW_MODE = 2,
	NDMP_TAPE_RAW1_MODE = 0x7fffffff,
	NDMP_TAPE_RAW2_MODE = NDMP_TAPE_RAW_MODE
};
typedef enum ndmp_tape_open_mode ndmp_tape_open_mode;

struct ndmp_tape_open_request {
	ndmp_tape_device device;
	ndmp_tape_open_mode mode;
};
typedef struct ndmp_tape_open_request ndmp_tape_open_request;

struct ndmp_tape_open_reply {
	ndmp_error error;
};
typedef struct ndmp_tape_open_reply ndmp_tape_open_reply;

struct ndmp_tape_close_reply {
	ndmp_error error;
};
typedef struct ndmp_tape_close_reply ndmp_tape_close_reply;
#define	NDMP_TAPE_NOREWIND 0x0008
#define	NDMP_TAPE_WR_PROT 0x0010
#define	NDMP_TAPE_ERROR 0x0020
#define	NDMP_TAPE_UNLOAD 0x0040

struct ndmp_tape_get_state_reply {
	ndmp_error error;
	u_long flags;
	u_long file_num;
	u_long soft_errors;
	u_long block_size;
	u_long blockno;
	ndmp_u_quad total_space;
	ndmp_u_quad space_remain;
};
typedef struct ndmp_tape_get_state_reply ndmp_tape_get_state_reply;

enum ndmp_tape_mtio_op {
	NDMP_MTIO_FSF = 0,
	NDMP_MTIO_BSF = 1,
	NDMP_MTIO_FSR = 2,
	NDMP_MTIO_BSR = 3,
	NDMP_MTIO_REW = 4,
	NDMP_MTIO_EOF = 5,
	NDMP_MTIO_OFF = 6,
	NDMP_MTIO_TUR = 7
};
typedef enum ndmp_tape_mtio_op ndmp_tape_mtio_op;

struct ndmp_tape_mtio_request {
	ndmp_tape_mtio_op tape_op;
	u_long count;
};
typedef struct ndmp_tape_mtio_request ndmp_tape_mtio_request;

struct ndmp_tape_mtio_reply {
	ndmp_error error;
	u_long resid_count;
};
typedef struct ndmp_tape_mtio_reply ndmp_tape_mtio_reply;

struct ndmp_tape_write_request {
	struct {
		u_int data_out_len;
		char *data_out_val;
	} data_out;
};
typedef struct ndmp_tape_write_request ndmp_tape_write_request;

struct ndmp_tape_write_reply {
	ndmp_error error;
	u_long count;
};
typedef struct ndmp_tape_write_reply ndmp_tape_write_reply;

struct ndmp_tape_read_request {
	u_long count;
};
typedef struct ndmp_tape_read_request ndmp_tape_read_request;

struct ndmp_tape_read_reply {
	ndmp_error error;
	struct {
		u_int data_in_len;
		char *data_in_val;
	} data_in;
};
typedef struct ndmp_tape_read_reply ndmp_tape_read_reply;

typedef ndmp_execute_cdb_request ndmp_tape_execute_cdb_request;

typedef ndmp_execute_cdb_reply ndmp_tape_execute_cdb_reply;

struct ndmp_tape_open_request_v3 {
	char *device;
	ndmp_tape_open_mode mode;
};
typedef struct ndmp_tape_open_request_v3 ndmp_tape_open_request_v3;
#define	NDMP_TAPE_STATE_NOREWIND 0x0008
#define	NDMP_TAPE_STATE_WR_PROT 0x0010
#define	NDMP_TAPE_STATE_ERROR 0x0020
#define	NDMP_TAPE_STATE_UNLOAD 0x0040
#define	NDMP_TAPE_STATE_FILE_NUM_INVALID 0x00000001
#define	NDMP_TAPE_STATE_SOFT_ERRORS_INVALID 0x00000002
#define	NDMP_TAPE_STATE_BLOCK_SIZE_INVALID 0x00000004
#define	NDMP_TAPE_STATE_BLOCKNO_INVALID 0x00000008
#define	NDMP_TAPE_STATE_TOTAL_SPACE_INVALID 0x00000010
#define	NDMP_TAPE_STATE_SPACE_REMAIN_INVALID 0x00000020
#define	NDMP_TAPE_STATE_PARTITION_INVALID 0x00000040

struct ndmp_tape_get_state_reply_v3 {
	u_long invalid;
	ndmp_error error;
	u_long flags;
	u_long file_num;
	u_long soft_errors;
	u_long block_size;
	u_long blockno;
	ndmp_u_quad total_space;
	ndmp_u_quad space_remain;
	u_long partition;
};
typedef struct ndmp_tape_get_state_reply_v3 ndmp_tape_get_state_reply_v3;

struct ndmp_tape_get_state_reply_v4 {
	u_long unsupported;
	ndmp_error error;
	u_long flags;
	u_long file_num;
	u_long soft_errors;
	u_long block_size;
	u_long blockno;
	ndmp_u_quad total_space;
	ndmp_u_quad space_remain;
};
typedef struct ndmp_tape_get_state_reply_v4 ndmp_tape_get_state_reply_v4;

enum ndmp_mover_mode {
	NDMP_MOVER_MODE_READ = 0,
	NDMP_MOVER_MODE_WRITE = 1,
	NDMP_MOVER_MODE_NOACTION = 2
};
typedef enum ndmp_mover_mode ndmp_mover_mode;

enum ndmp_mover_state {
	NDMP_MOVER_STATE_IDLE = 0,
	NDMP_MOVER_STATE_LISTEN = 1,
	NDMP_MOVER_STATE_ACTIVE = 2,
	NDMP_MOVER_STATE_PAUSED = 3,
	NDMP_MOVER_STATE_HALTED = 4
};
typedef enum ndmp_mover_state ndmp_mover_state;

enum ndmp_mover_pause_reason {
	NDMP_MOVER_PAUSE_NA = 0,
	NDMP_MOVER_PAUSE_EOM = 1,
	NDMP_MOVER_PAUSE_EOF = 2,
	NDMP_MOVER_PAUSE_SEEK = 3,
	NDMP_MOVER_PAUSE_MEDIA_ERROR = 4,
	NDMP_MOVER_PAUSE_EOW = 5
};
typedef enum ndmp_mover_pause_reason ndmp_mover_pause_reason;

enum ndmp_mover_halt_reason {
	NDMP_MOVER_HALT_NA = 0,
	NDMP_MOVER_HALT_CONNECT_CLOSED = 1,
	NDMP_MOVER_HALT_ABORTED = 2,
	NDMP_MOVER_HALT_INTERNAL_ERROR = 3,
	NDMP_MOVER_HALT_CONNECT_ERROR = 4,
	NDMP_MOVER_HALT_MEDIA_ERROR = 5
};
typedef enum ndmp_mover_halt_reason ndmp_mover_halt_reason;

struct ndmp_mover_get_state_reply {
	ndmp_error error;
	ndmp_mover_state state;
	ndmp_mover_pause_reason pause_reason;
	ndmp_mover_halt_reason halt_reason;
	u_long record_size;
	u_long record_num;
	ndmp_u_quad data_written;
	ndmp_u_quad seek_position;
	ndmp_u_quad bytes_left_to_read;
	ndmp_u_quad window_offset;
	ndmp_u_quad window_length;
};
typedef struct ndmp_mover_get_state_reply ndmp_mover_get_state_reply;

struct ndmp_tcp_addr {
	u_long ip_addr;
	u_short port;
};
typedef struct ndmp_tcp_addr ndmp_tcp_addr;

struct ndmp_mover_addr {
	ndmp_addr_type addr_type;
	union {
		ndmp_tcp_addr addr;
	} ndmp_mover_addr_u;
};
typedef struct ndmp_mover_addr ndmp_mover_addr;

struct ndmp_mover_listen_request {
	ndmp_mover_mode mode;
	ndmp_addr_type addr_type;
};
typedef struct ndmp_mover_listen_request ndmp_mover_listen_request;

struct ndmp_mover_listen_reply {
	ndmp_error error;
	ndmp_mover_addr mover;
};
typedef struct ndmp_mover_listen_reply ndmp_mover_listen_reply;

struct ndmp_mover_set_record_size_request {
	u_long len;
};
typedef struct ndmp_mover_set_record_size_request ndmp_mover_set_record_size_request;

struct ndmp_mover_set_record_size_reply {
	ndmp_error error;
};
typedef struct ndmp_mover_set_record_size_reply ndmp_mover_set_record_size_reply;

struct ndmp_mover_set_window_request {
	ndmp_u_quad offset;
	ndmp_u_quad length;
};
typedef struct ndmp_mover_set_window_request ndmp_mover_set_window_request;

struct ndmp_mover_set_window_reply {
	ndmp_error error;
};
typedef struct ndmp_mover_set_window_reply ndmp_mover_set_window_reply;

struct ndmp_mover_continue_reply {
	ndmp_error error;
};
typedef struct ndmp_mover_continue_reply ndmp_mover_continue_reply;

struct ndmp_mover_abort_reply {
	ndmp_error error;
};
typedef struct ndmp_mover_abort_reply ndmp_mover_abort_reply;

struct ndmp_mover_stop_reply {
	ndmp_error error;
};
typedef struct ndmp_mover_stop_reply ndmp_mover_stop_reply;

struct ndmp_mover_read_request {
	ndmp_u_quad offset;
	ndmp_u_quad length;
};
typedef struct ndmp_mover_read_request ndmp_mover_read_request;

struct ndmp_mover_read_reply {
	ndmp_error error;
};
typedef struct ndmp_mover_read_reply ndmp_mover_read_reply;

struct ndmp_mover_close_reply {
	ndmp_error error;
};
typedef struct ndmp_mover_close_reply ndmp_mover_close_reply;

struct ndmp_fc_addr_v3 {
	u_long loop_id;
};
typedef struct ndmp_fc_addr_v3 ndmp_fc_addr_v3;

struct ndmp_ipc_addr_v3 {
	struct {
		u_int comm_data_len;
		char *comm_data_val;
	} comm_data;
};
typedef struct ndmp_ipc_addr_v3 ndmp_ipc_addr_v3;

struct ndmp_addr_v3 {
	ndmp_addr_type addr_type;
	union {
		ndmp_tcp_addr tcp_addr;
		ndmp_fc_addr_v3 fc_addr;
		ndmp_ipc_addr_v3 ipc_addr;
	} ndmp_addr_v3_u;
};
typedef struct ndmp_addr_v3 ndmp_addr_v3;


/*
 * Macros to access the port and IP address of TCP addresses.
 */
#ifndef tcp_ip_v3
#define tcp_ip_v3 ndmp_addr_v3_u.tcp_addr.ip_addr
#endif /* tcp_ip_v3 */
#ifndef tcp_port_v3
#define tcp_port_v3 ndmp_addr_v3_u.tcp_addr.port
#endif /* tcp_port_v3 */

struct ndmp_mover_get_state_reply_v3 {
	ndmp_error error;
	ndmp_mover_state state;
	ndmp_mover_pause_reason pause_reason;
	ndmp_mover_halt_reason halt_reason;
	u_long record_size;
	u_long record_num;
	ndmp_u_quad data_written;
	ndmp_u_quad seek_position;
	ndmp_u_quad bytes_left_to_read;
	ndmp_u_quad window_offset;
	ndmp_u_quad window_length;
	ndmp_addr_v3 data_connection_addr;
};
typedef struct ndmp_mover_get_state_reply_v3 ndmp_mover_get_state_reply_v3;

struct ndmp_mover_listen_reply_v3 {
	ndmp_error error;
	ndmp_addr_v3 data_connection_addr;
};
typedef struct ndmp_mover_listen_reply_v3 ndmp_mover_listen_reply_v3;

struct ndmp_mover_connect_request_v3 {
	ndmp_mover_mode mode;
	ndmp_addr_v3 addr;
};
typedef struct ndmp_mover_connect_request_v3 ndmp_mover_connect_request_v3;

struct ndmp_mover_connect_reply_v3 {
	ndmp_error error;
};
typedef struct ndmp_mover_connect_reply_v3 ndmp_mover_connect_reply_v3;


/*
 * Macros to access the port and IP address of TCP addresses.
 */
#ifndef tcp_addr_v4
#define tcp_addr_v4 ndmp_addr_v4_u.tcp_addr.tcp_addr_val
#endif /* tcp_addr_v4 */
#ifndef tcp_ip_v4
#define tcp_ip_v4(n) ndmp_addr_v4_u.tcp_addr.tcp_addr_val[n].ip_addr
#endif /* tcp_ip_v4 */
#ifndef tcp_port_v4
#define tcp_port_v4(n) ndmp_addr_v4_u.tcp_addr.tcp_addr_val[n].port
#endif /* tcp_port_v4 */
#ifndef tcp_len_v4
#define tcp_len_v4 ndmp_addr_v4_u.tcp_addr.tcp_addr_len
#endif /* tcp_len_v4 */
#ifndef tcp_env_v4
#define tcp_env_v4(n) ndmp_addr_v4_u.tcp_addr.tcp_addr_val[n].addr_env
#endif /* tcp_env_v4 */

struct ndmp_tcp_addr_v4 {
	u_long ip_addr;
	u_short port;
	struct {
		u_int addr_env_len;
		ndmp_pval *addr_env_val;
	} addr_env;
};
typedef struct ndmp_tcp_addr_v4 ndmp_tcp_addr_v4;

struct ndmp_addr_v4 {
	ndmp_addr_type addr_type;
	union {
		struct {
			u_int tcp_addr_len;
			ndmp_tcp_addr_v4 *tcp_addr_val;
		} tcp_addr;
		ndmp_ipc_addr_v3 ipc_addr;
	} ndmp_addr_v4_u;
};
typedef struct ndmp_addr_v4 ndmp_addr_v4;

struct ndmp_mover_connect_request_v4 {
	ndmp_mover_mode mode;
	ndmp_addr_v4 addr;
};
typedef struct ndmp_mover_connect_request_v4 ndmp_mover_connect_request_v4;

struct ndmp_mover_listen_reply_v4 {
	ndmp_error error;
	ndmp_addr_v4 connect_addr;
};
typedef struct ndmp_mover_listen_reply_v4 ndmp_mover_listen_reply_v4;

struct ndmp_mover_get_state_reply_v4 {
	ndmp_error error;
	ndmp_mover_mode mode;
	ndmp_mover_state state;
	ndmp_mover_pause_reason pause_reason;
	ndmp_mover_halt_reason halt_reason;
	u_long record_size;
	u_long record_num;
	ndmp_u_quad bytes_moved;
	ndmp_u_quad seek_position;
	ndmp_u_quad bytes_left_to_read;
	ndmp_u_quad window_offset;
	ndmp_u_quad window_length;
	ndmp_addr_v4 data_connection_addr;
};
typedef struct ndmp_mover_get_state_reply_v4 ndmp_mover_get_state_reply_v4;

enum ndmp_data_operation {
	NDMP_DATA_OP_NOACTION = 0,
	NDMP_DATA_OP_BACKUP = 1,
	NDMP_DATA_OP_RECOVER = 2,
	NDMP_DATA_OP_RECOVER_FILEHIST = 3
};
typedef enum ndmp_data_operation ndmp_data_operation;

enum ndmp_data_state {
	NDMP_DATA_STATE_IDLE = 0,
	NDMP_DATA_STATE_ACTIVE = 1,
	NDMP_DATA_STATE_HALTED = 2,
	NDMP_DATA_STATE_LISTEN = 3,
	NDMP_DATA_STATE_CONNECTED = 4
};
typedef enum ndmp_data_state ndmp_data_state;

enum ndmp_data_halt_reason {
	NDMP_DATA_HALT_NA = 0,
	NDMP_DATA_HALT_SUCCESSFUL = 1,
	NDMP_DATA_HALT_ABORTED = 2,
	NDMP_DATA_HALT_INTERNAL_ERROR = 3,
	NDMP_DATA_HALT_CONNECT_ERROR = 4
};
typedef enum ndmp_data_halt_reason ndmp_data_halt_reason;

struct ndmp_data_get_state_reply {
	ndmp_error error;
	ndmp_data_operation operation;
	ndmp_data_state state;
	ndmp_data_halt_reason halt_reason;
	ndmp_u_quad bytes_processed;
	ndmp_u_quad est_bytes_remain;
	u_long est_time_remain;
	ndmp_mover_addr mover;
	ndmp_u_quad read_offset;
	ndmp_u_quad read_length;
};
typedef struct ndmp_data_get_state_reply ndmp_data_get_state_reply;

struct ndmp_data_start_backup_request {
	ndmp_mover_addr mover;
	char *bu_type;
	struct {
		u_int env_len;
		ndmp_pval *env_val;
	} env;
};
typedef struct ndmp_data_start_backup_request ndmp_data_start_backup_request;

struct ndmp_data_start_backup_reply {
	ndmp_error error;
};
typedef struct ndmp_data_start_backup_reply ndmp_data_start_backup_reply;

struct ndmp_name {
	char *name;
	char *dest;
	u_short ssid;
	ndmp_u_quad fh_info;
};
typedef struct ndmp_name ndmp_name;

struct ndmp_data_start_recover_request {
	ndmp_mover_addr mover;
	struct {
		u_int env_len;
		ndmp_pval *env_val;
	} env;
	struct {
		u_int nlist_len;
		ndmp_name *nlist_val;
	} nlist;
	char *bu_type;
};
typedef struct ndmp_data_start_recover_request ndmp_data_start_recover_request;

struct ndmp_data_start_recover_reply {
	ndmp_error error;
};
typedef struct ndmp_data_start_recover_reply ndmp_data_start_recover_reply;

struct ndmp_data_abort_reply {
	ndmp_error error;
};
typedef struct ndmp_data_abort_reply ndmp_data_abort_reply;

struct ndmp_data_stop_reply {
	ndmp_error error;
};
typedef struct ndmp_data_stop_reply ndmp_data_stop_reply;

struct ndmp_data_get_env_reply {
	ndmp_error error;
	struct {
		u_int env_len;
		ndmp_pval *env_val;
	} env;
};
typedef struct ndmp_data_get_env_reply ndmp_data_get_env_reply;

struct ndmp_notify_data_halted_request {
	ndmp_data_halt_reason reason;
	char *text_reason;
};
typedef struct ndmp_notify_data_halted_request ndmp_notify_data_halted_request;
#define	NDMP_DATA_STATE_EST_BYTES_REMAIN_INVALID 0x00000001
#define	NDMP_DATA_STATE_EST_TIME_REMAIN_INVALID 0x00000002

struct ndmp_data_get_state_reply_v3 {
	u_long invalid;
	ndmp_error error;
	ndmp_data_operation operation;
	ndmp_data_state state;
	ndmp_data_halt_reason halt_reason;
	ndmp_u_quad bytes_processed;
	ndmp_u_quad est_bytes_remain;
	u_long est_time_remain;
	ndmp_addr_v3 data_connection_addr;
	ndmp_u_quad read_offset;
	ndmp_u_quad read_length;
};
typedef struct ndmp_data_get_state_reply_v3 ndmp_data_get_state_reply_v3;

struct ndmp_data_start_backup_request_v3 {
	char *bu_type;
	struct {
		u_int env_len;
		ndmp_pval *env_val;
	} env;
};
typedef struct ndmp_data_start_backup_request_v3 ndmp_data_start_backup_request_v3;

struct ndmp_name_v3 {
	char *original_path;
	char *destination_dir;
	char *new_name;
	char *other_name;
	ndmp_u_quad node;
	ndmp_u_quad fh_info;
};
typedef struct ndmp_name_v3 ndmp_name_v3;

struct ndmp_data_start_recover_request_v3 {
	struct {
		u_int env_len;
		ndmp_pval *env_val;
	} env;
	struct {
		u_int nlist_len;
		ndmp_name_v3 *nlist_val;
	} nlist;
	char *bu_type;
};
typedef struct ndmp_data_start_recover_request_v3 ndmp_data_start_recover_request_v3;

struct ndmp_data_listen_request_v3 {
	ndmp_addr_type addr_type;
};
typedef struct ndmp_data_listen_request_v3 ndmp_data_listen_request_v3;

struct ndmp_data_listen_reply_v3 {
	ndmp_error error;
	ndmp_addr_v3 data_connection_addr;
};
typedef struct ndmp_data_listen_reply_v3 ndmp_data_listen_reply_v3;

struct ndmp_data_connect_request_v3 {
	ndmp_addr_v3 addr;
};
typedef struct ndmp_data_connect_request_v3 ndmp_data_connect_request_v3;

struct ndmp_data_connect_reply_v3 {
	ndmp_error error;
};
typedef struct ndmp_data_connect_reply_v3 ndmp_data_connect_reply_v3;

struct ndmp_data_get_state_reply_v4 {
	u_long unsupported;
	ndmp_error error;
	ndmp_data_operation operation;
	ndmp_data_state state;
	ndmp_data_halt_reason halt_reason;
	ndmp_u_quad bytes_processed;
	ndmp_u_quad est_bytes_remain;
	u_long est_time_remain;
	ndmp_addr_v4 data_connection_addr;
	ndmp_u_quad read_offset;
	ndmp_u_quad read_length;
};
typedef struct ndmp_data_get_state_reply_v4 ndmp_data_get_state_reply_v4;

struct ndmp_data_listen_reply_v4 {
	ndmp_error error;
	ndmp_addr_v4 connect_addr;
};
typedef struct ndmp_data_listen_reply_v4 ndmp_data_listen_reply_v4;

struct ndmp_data_connect_request_v4 {
	ndmp_addr_v4 addr;
};
typedef struct ndmp_data_connect_request_v4 ndmp_data_connect_request_v4;

enum ndmp_connect_reason {
	NDMP_CONNECTED = 0,
	NDMP_SHUTDOWN = 1,
	NDMP_REFUSED = 2
};
typedef enum ndmp_connect_reason ndmp_connect_reason;

struct ndmp_notify_connected_request {
	ndmp_connect_reason reason;
	u_short protocol_version;
	const char *text_reason;
};
typedef struct ndmp_notify_connected_request ndmp_notify_connected_request;

struct ndmp_notify_mover_paused_request {
	ndmp_mover_pause_reason reason;
	ndmp_u_quad seek_position;
};
typedef struct ndmp_notify_mover_paused_request ndmp_notify_mover_paused_request;

struct ndmp_notify_mover_halted_request {
	ndmp_mover_halt_reason reason;
	char *text_reason;
};
typedef struct ndmp_notify_mover_halted_request ndmp_notify_mover_halted_request;

struct ndmp_notify_data_read_request {
	ndmp_u_quad offset;
	ndmp_u_quad length;
};
typedef struct ndmp_notify_data_read_request ndmp_notify_data_read_request;

struct ndmp_notify_data_halted_request_v4 {
	ndmp_data_halt_reason reason;
};
typedef struct ndmp_notify_data_halted_request_v4 ndmp_notify_data_halted_request_v4;

struct ndmp_notify_mover_halted_request_v4 {
	ndmp_mover_halt_reason reason;
};
typedef struct ndmp_notify_mover_halted_request_v4 ndmp_notify_mover_halted_request_v4;

struct ndmp_log_log_request {
	char *entry;
};
typedef struct ndmp_log_log_request ndmp_log_log_request;

enum ndmp_debug_level {
	NDMP_DBG_USER_INFO = 0,
	NDMP_DBG_USER_SUMMARY = 1,
	NDMP_DBG_USER_DETAIL = 2,
	NDMP_DBG_DIAG_INFO = 3,
	NDMP_DBG_DIAG_SUMMARY = 4,
	NDMP_DBG_DIAG_DETAIL = 5,
	NDMP_DBG_PROG_INFO = 6,
	NDMP_DBG_PROG_SUMMARY = 7,
	NDMP_DBG_PROG_DETAIL = 8
};
typedef enum ndmp_debug_level ndmp_debug_level;

struct ndmp_log_debug_request {
	ndmp_debug_level level;
	char *message;
};
typedef struct ndmp_log_debug_request ndmp_log_debug_request;

struct ndmp_log_file_request {
	char *name;
	u_short ssid;
	ndmp_error error;
};
typedef struct ndmp_log_file_request ndmp_log_file_request;

enum ndmp_log_type {
	NDMP_LOG_NORMAL = 0,
	NDMP_LOG_DEBUG = 1,
	NDMP_LOG_ERROR = 2,
	NDMP_LOG_WARNING = 3
};
typedef enum ndmp_log_type ndmp_log_type;

struct ndmp_log_message_request_v3 {
	ndmp_log_type log_type;
	u_long message_id;
	char *entry;
};
typedef struct ndmp_log_message_request_v3 ndmp_log_message_request_v3;

struct ndmp_log_file_request_v3 {
	char *name;
	ndmp_error error;
};
typedef struct ndmp_log_file_request_v3 ndmp_log_file_request_v3;

enum ndmp_has_associated_message {
	NDMP_NO_ASSOCIATED_MESSAGE = 0,
	NDMP_HAS_ASSOCIATED_MESSAGE = 1
};
typedef enum ndmp_has_associated_message ndmp_has_associated_message;

enum ndmp_recovery_status {
	NDMP_RECOVERY_SUCCESSFUL = 0,
	NDMP_RECOVERY_FAILED_PERMISSION = 1,
	NDMP_RECOVERY_FAILED_NOT_FOUND = 2,
	NDMP_RECOVERY_FAILED_NO_DIRECTORY = 3,
	NDMP_RECOVERY_FAILED_OUT_OF_MEMORY = 4,
	NDMP_RECOVERY_FAILED_IO_ERROR = 5,
	NDMP_RECOVERY_FAILED_UNDEFINED_ERROR = 6,
	NDMP_RECOVERY_FAILED_FILE_PATH_EXISTS = 7
};
typedef enum ndmp_recovery_status ndmp_recovery_status;

struct ndmp_log_message_request_v4 {
	ndmp_log_type log_type;
	u_long message_id;
	char *entry;
	ndmp_has_associated_message associated_message_valid;
	u_long associated_message_sequence;
};
typedef struct ndmp_log_message_request_v4 ndmp_log_message_request_v4;

struct ndmp_log_file_request_v4 {
	char *name;
	ndmp_recovery_status recovery_status;
};
typedef struct ndmp_log_file_request_v4 ndmp_log_file_request_v4;

typedef char *ndmp_unix_path;

enum ndmp_file_type {
	NDMP_FILE_DIR = 0,
	NDMP_FILE_FIFO = 1,
	NDMP_FILE_CSPEC = 2,
	NDMP_FILE_BSPEC = 3,
	NDMP_FILE_REG = 4,
	NDMP_FILE_SLINK = 5,
	NDMP_FILE_SOCK = 6,
	NDMP_FILE_REGISTRY = 7,
	NDMP_FILE_OTHER = 8
};
typedef enum ndmp_file_type ndmp_file_type;

struct ndmp_unix_file_stat {
	ndmp_file_type ftype;
	u_long mtime;
	u_long atime;
	u_long ctime;
	u_long uid;
	u_long gid;
	u_long mode;
	ndmp_u_quad size;
	ndmp_u_quad fh_info;
};
typedef struct ndmp_unix_file_stat ndmp_unix_file_stat;

struct ndmp_fh_unix_path {
	ndmp_unix_path name;
	ndmp_unix_file_stat fstat;
};
typedef struct ndmp_fh_unix_path ndmp_fh_unix_path;

struct ndmp_fh_add_unix_path_request {
	struct {
		u_int paths_len;
		ndmp_fh_unix_path *paths_val;
	} paths;
};
typedef struct ndmp_fh_add_unix_path_request ndmp_fh_add_unix_path_request;

struct ndmp_fh_unix_dir {
	ndmp_unix_path name;
	u_long node;
	u_long parent;
};
typedef struct ndmp_fh_unix_dir ndmp_fh_unix_dir;

struct ndmp_fh_add_unix_dir_request {
	struct {
		u_int dirs_len;
		ndmp_fh_unix_dir *dirs_val;
	} dirs;
};
typedef struct ndmp_fh_add_unix_dir_request ndmp_fh_add_unix_dir_request;

struct ndmp_fh_unix_node {
	ndmp_unix_file_stat fstat;
	u_long node;
};
typedef struct ndmp_fh_unix_node ndmp_fh_unix_node;

struct ndmp_fh_add_unix_node_request {
	struct {
		u_int nodes_len;
		ndmp_fh_unix_node *nodes_val;
	} nodes;
};
typedef struct ndmp_fh_add_unix_node_request ndmp_fh_add_unix_node_request;

enum ndmp_fs_type {
	NDMP_FS_UNIX = 0,
	NDMP_FS_NT = 1,
	NDMP_FS_OTHER = 2
};
typedef enum ndmp_fs_type ndmp_fs_type;

typedef char *ndmp_path_v3;

struct ndmp_nt_path_v3 {
	ndmp_path_v3 nt_path;
	ndmp_path_v3 dos_path;
};
typedef struct ndmp_nt_path_v3 ndmp_nt_path_v3;

struct ndmp_file_name_v3 {
	ndmp_fs_type fs_type;
	union {
		ndmp_path_v3 unix_name;
		ndmp_nt_path_v3 nt_name;
		ndmp_path_v3 other_name;
	} ndmp_file_name_v3_u;
};
typedef struct ndmp_file_name_v3 ndmp_file_name_v3;
#define	NDMP_FILE_STAT_ATIME_INVALID 0x00000001
#define	NDMP_FILE_STAT_CTIME_INVALID 0x00000002
#define	NDMP_FILE_STAT_GROUP_INVALID 0x00000004

struct ndmp_file_stat_v3 {
	u_long invalid;
	ndmp_fs_type fs_type;
	ndmp_file_type ftype;
	u_long mtime;
	u_long atime;
	u_long ctime;
	u_long owner;
	u_long group;
	u_long fattr;
	ndmp_u_quad size;
	u_long links;
};
typedef struct ndmp_file_stat_v3 ndmp_file_stat_v3;

struct ndmp_file_v3 {
	struct {
		u_int names_len;
		ndmp_file_name_v3 *names_val;
	} names;
	struct {
		u_int stats_len;
		ndmp_file_stat_v3 *stats_val;
	} stats;
	ndmp_u_quad node;
	ndmp_u_quad fh_info;
};
typedef struct ndmp_file_v3 ndmp_file_v3;

struct ndmp_fh_add_file_request_v3 {
	struct {
		u_int files_len;
		ndmp_file_v3 *files_val;
	} files;
};
typedef struct ndmp_fh_add_file_request_v3 ndmp_fh_add_file_request_v3;

struct ndmp_dir_v3 {
	struct {
		u_int names_len;
		ndmp_file_name_v3 *names_val;
	} names;
	ndmp_u_quad node;
	ndmp_u_quad parent;
};
typedef struct ndmp_dir_v3 ndmp_dir_v3;

struct ndmp_fh_add_dir_request_v3 {
	struct {
		u_int dirs_len;
		ndmp_dir_v3 *dirs_val;
	} dirs;
};
typedef struct ndmp_fh_add_dir_request_v3 ndmp_fh_add_dir_request_v3;

struct ndmp_node_v3 {
	struct {
		u_int stats_len;
		ndmp_file_stat_v3 *stats_val;
	} stats;
	ndmp_u_quad node;
	ndmp_u_quad fh_info;
};
typedef struct ndmp_node_v3 ndmp_node_v3;

struct ndmp_fh_add_node_request_v3 {
	struct {
		u_int nodes_len;
		ndmp_node_v3 *nodes_val;
	} nodes;
};
typedef struct ndmp_fh_add_node_request_v3 ndmp_fh_add_node_request_v3;

typedef ndmp_auth_text ndmp_auth_text_v2;
typedef ndmp_auth_text_v3 ndmp_auth_text_v4;

typedef ndmp_auth_md5 ndmp_auth_md5_v2;
typedef ndmp_auth_md5_v3 ndmp_auth_md5_v4;

typedef ndmp_auth_data ndmp_auth_data_v2;
typedef ndmp_auth_data_v3 ndmp_auth_data_v4;

typedef ndmp_connect_open_request ndmp_connect_open_request_v2;
typedef ndmp_connect_open_request ndmp_connect_open_request_v3;
typedef ndmp_connect_open_request ndmp_connect_open_request_v4;

typedef ndmp_connect_open_reply ndmp_connect_open_reply_v2;
typedef ndmp_connect_open_reply ndmp_connect_open_reply_v3;
typedef ndmp_connect_open_reply ndmp_connect_open_reply_v4;

typedef ndmp_connect_client_auth_request ndmp_connect_client_auth_request_v2;
typedef ndmp_connect_client_auth_request_v3 ndmp_connect_client_auth_request_v4;

typedef ndmp_connect_client_auth_reply ndmp_connect_client_auth_reply_v2;
typedef ndmp_connect_client_auth_reply_v3 ndmp_connect_client_auth_reply_v4;

typedef ndmp_connect_server_auth_request ndmp_connect_server_auth_request_v2;
typedef ndmp_connect_server_auth_request ndmp_connect_server_auth_request_v3;
typedef ndmp_connect_server_auth_request ndmp_connect_server_auth_request_v4;

typedef ndmp_connect_server_auth_reply ndmp_connect_server_auth_reply_v2;
typedef ndmp_connect_server_auth_reply ndmp_connect_server_auth_reply_v3;
typedef ndmp_connect_server_auth_reply ndmp_connect_server_auth_reply_v4;

typedef ndmp_config_get_host_info_reply ndmp_config_get_host_info_reply_v2;
typedef ndmp_config_get_host_info_reply_v3 ndmp_config_get_host_info_reply_v4;

typedef ndmp_config_get_butype_attr_request ndmp_config_get_butype_attr_request_v2;
typedef ndmp_config_get_butype_attr_reply ndmp_config_get_butype_attr_reply_v2;

typedef ndmp_config_get_mover_type_reply ndmp_config_get_mover_type_reply_v2;

typedef ndmp_config_get_auth_attr_request ndmp_config_get_auth_attr_request_v2;
typedef ndmp_config_get_auth_attr_request ndmp_config_get_auth_attr_request_v3;
typedef ndmp_config_get_auth_attr_request ndmp_config_get_auth_attr_request_v4;

typedef ndmp_config_get_auth_attr_reply ndmp_config_get_auth_attr_reply_v2;
typedef ndmp_config_get_auth_attr_reply ndmp_config_get_auth_attr_reply_v3;
typedef ndmp_config_get_auth_attr_reply ndmp_config_get_auth_attr_reply_v4;

typedef ndmp_config_get_connection_type_reply_v3 ndmp_config_get_connection_type_reply_v4;

typedef ndmp_config_get_server_info_reply_v3 ndmp_config_get_server_info_reply_v4;

typedef ndmp_fs_info_v3 ndmp_fs_info_v4;

typedef ndmp_config_get_fs_info_reply_v3 ndmp_config_get_fs_info_reply_v4;

typedef ndmp_device_info_v3 ndmp_device_info_v4;

typedef ndmp_config_get_tape_info_reply_v3 ndmp_config_get_tape_info_reply_v4;

typedef ndmp_config_get_scsi_info_reply_v3 ndmp_config_get_scsi_info_reply_v4;

typedef ndmp_config_get_ext_list_reply ndmp_config_get_ext_list_reply_v4;
typedef ndmp_config_set_ext_list_request ndmp_config_set_ext_list_request_v4;
typedef ndmp_config_set_ext_list_reply ndmp_config_set_ext_list_reply_v4;

typedef ndmp_scsi_open_request ndmp_scsi_open_request_v2;
typedef ndmp_scsi_open_request_v3 ndmp_scsi_open_request_v4;

typedef ndmp_scsi_open_reply ndmp_scsi_open_reply_v2;
typedef ndmp_scsi_open_reply ndmp_scsi_open_reply_v3;
typedef ndmp_scsi_open_reply ndmp_scsi_open_reply_v4;

typedef ndmp_scsi_close_reply ndmp_scsi_close_reply_v2;
typedef ndmp_scsi_close_reply ndmp_scsi_close_reply_v3;
typedef ndmp_scsi_close_reply ndmp_scsi_close_reply_v4;

typedef ndmp_scsi_get_state_reply ndmp_scsi_get_state_reply_v2;
typedef ndmp_scsi_get_state_reply ndmp_scsi_get_state_reply_v3;
typedef ndmp_scsi_get_state_reply ndmp_scsi_get_state_reply_v4;

typedef ndmp_scsi_set_target_request ndmp_scsi_set_target_request_v2;

typedef ndmp_scsi_set_target_reply ndmp_scsi_set_target_reply_v2;
typedef ndmp_scsi_set_target_reply ndmp_scsi_set_target_reply_v3;

typedef ndmp_scsi_reset_device_reply ndmp_scsi_reset_device_reply_v2;
typedef ndmp_scsi_reset_device_reply ndmp_scsi_reset_device_reply_v3;
typedef ndmp_scsi_reset_device_reply ndmp_scsi_reset_device_reply_v4;

typedef ndmp_scsi_reset_bus_reply ndmp_scsi_reset_bus_reply_v2;
typedef ndmp_scsi_reset_bus_reply ndmp_scsi_reset_bus_reply_v3;

typedef ndmp_execute_cdb_request ndmp_scsi_execute_cdb_request_v2;
typedef ndmp_execute_cdb_request ndmp_scsi_execute_cdb_request_v3;
typedef ndmp_execute_cdb_request ndmp_scsi_execute_cdb_request_v4;

typedef ndmp_execute_cdb_reply ndmp_scsi_execute_cdb_reply_v2;
typedef ndmp_execute_cdb_reply ndmp_scsi_execute_cdb_reply_v3;
typedef ndmp_execute_cdb_reply ndmp_scsi_execute_cdb_reply_v4;

typedef ndmp_tape_open_request ndmp_tape_open_request_v2;
typedef ndmp_tape_open_request_v3 ndmp_tape_open_request_v4;

typedef ndmp_tape_open_reply ndmp_tape_open_reply_v2;
typedef ndmp_tape_open_reply ndmp_tape_open_reply_v3;
typedef ndmp_tape_open_reply ndmp_tape_open_reply_v4;

typedef ndmp_tape_close_reply ndmp_tape_close_reply_v2;
typedef ndmp_tape_close_reply ndmp_tape_close_reply_v3;
typedef ndmp_tape_close_reply ndmp_tape_close_reply_v4;

typedef ndmp_tape_get_state_reply ndmp_tape_get_state_reply_v2;

typedef ndmp_tape_mtio_request ndmp_tape_mtio_request_v2;
typedef ndmp_tape_mtio_request ndmp_tape_mtio_request_v3;
typedef ndmp_tape_mtio_request ndmp_tape_mtio_request_v4;

typedef ndmp_tape_mtio_reply ndmp_tape_mtio_reply_v2;
typedef ndmp_tape_mtio_reply ndmp_tape_mtio_reply_v3;
typedef ndmp_tape_mtio_reply ndmp_tape_mtio_reply_v4;

typedef ndmp_tape_write_request ndmp_tape_write_request_v2;
typedef ndmp_tape_write_request ndmp_tape_write_request_v3;
typedef ndmp_tape_write_request ndmp_tape_write_request_v4;

typedef ndmp_tape_write_reply ndmp_tape_write_reply_v2;
typedef ndmp_tape_write_reply ndmp_tape_write_reply_v3;
typedef ndmp_tape_write_reply ndmp_tape_write_reply_v4;

typedef ndmp_tape_read_request ndmp_tape_read_request_v2;
typedef ndmp_tape_read_request ndmp_tape_read_request_v3;
typedef ndmp_tape_read_request ndmp_tape_read_request_v4;

typedef ndmp_tape_read_reply ndmp_tape_read_reply_v2;
typedef ndmp_tape_read_reply ndmp_tape_read_reply_v3;
typedef ndmp_tape_read_reply ndmp_tape_read_reply_v4;

typedef ndmp_tape_execute_cdb_request ndmp_tape_execute_cdb_request_v2;
typedef ndmp_tape_execute_cdb_request ndmp_tape_execute_cdb_request_v3;
typedef ndmp_tape_execute_cdb_request ndmp_tape_execute_cdb_request_v4;

typedef ndmp_tape_execute_cdb_reply ndmp_tape_execute_cdb_reply_v2;
typedef ndmp_tape_execute_cdb_reply ndmp_tape_execute_cdb_reply_v3;
typedef ndmp_tape_execute_cdb_reply ndmp_tape_execute_cdb_reply_v4;

typedef ndmp_fc_addr_v3 ndmp_fc_addr;

typedef ndmp_ipc_addr_v3 ndmp_ipc_addr;

typedef ndmp_mover_get_state_reply ndmp_mover_get_state_reply_v2;

typedef ndmp_mover_listen_request ndmp_mover_listen_request_v2;
typedef ndmp_mover_listen_request ndmp_mover_listen_request_v3;
typedef ndmp_mover_listen_request ndmp_mover_listen_request_v4;

typedef ndmp_mover_listen_reply ndmp_mover_listen_reply_v2;

typedef ndmp_mover_set_record_size_request ndmp_mover_set_record_size_request_v2;
typedef ndmp_mover_set_record_size_request ndmp_mover_set_record_size_request_v3;
typedef ndmp_mover_set_record_size_request ndmp_mover_set_record_size_request_v4;

typedef ndmp_mover_set_record_size_reply ndmp_mover_set_record_size_reply_v2;
typedef ndmp_mover_set_record_size_reply ndmp_mover_set_record_size_reply_v3;
typedef ndmp_mover_set_record_size_reply ndmp_mover_set_record_size_reply_v4;

typedef ndmp_mover_set_window_request ndmp_mover_set_window_request_v2;
typedef ndmp_mover_set_window_request ndmp_mover_set_window_request_v3;
typedef ndmp_mover_set_window_request ndmp_mover_set_window_request_v4;

typedef ndmp_mover_set_window_reply ndmp_mover_set_window_reply_v2;
typedef ndmp_mover_set_window_reply ndmp_mover_set_window_reply_v3;
typedef ndmp_mover_set_window_reply ndmp_mover_set_window_reply_v4;

typedef ndmp_mover_continue_reply ndmp_mover_continue_reply_v2;
typedef ndmp_mover_continue_reply ndmp_mover_continue_reply_v3;
typedef ndmp_mover_continue_reply ndmp_mover_continue_reply_v4;

typedef ndmp_mover_abort_reply ndmp_mover_abort_reply_v2;
typedef ndmp_mover_abort_reply ndmp_mover_abort_reply_v3;
typedef ndmp_mover_abort_reply ndmp_mover_abort_reply_v4;

typedef ndmp_mover_stop_reply ndmp_mover_stop_reply_v2;
typedef ndmp_mover_stop_reply ndmp_mover_stop_reply_v3;
typedef ndmp_mover_stop_reply ndmp_mover_stop_reply_v4;

typedef ndmp_mover_read_request ndmp_mover_read_request_v2;
typedef ndmp_mover_read_request ndmp_mover_read_request_v3;
typedef ndmp_mover_read_request ndmp_mover_read_request_v4;

typedef ndmp_mover_read_reply ndmp_mover_read_reply_v2;
typedef ndmp_mover_read_reply ndmp_mover_read_reply_v3;
typedef ndmp_mover_read_reply ndmp_mover_read_reply_v4;

typedef ndmp_mover_close_reply ndmp_mover_close_reply_v2;
typedef ndmp_mover_close_reply ndmp_mover_close_reply_v3;
typedef ndmp_mover_close_reply ndmp_mover_close_reply_v4;

typedef ndmp_mover_connect_reply_v3 ndmp_mover_connect_reply_v4;

typedef ndmp_data_get_state_reply ndmp_data_get_state_reply_v2;

typedef ndmp_data_start_backup_request ndmp_data_start_backup_request_v2;
typedef ndmp_data_start_backup_request_v3 ndmp_data_start_backup_request_v4;

typedef ndmp_data_start_backup_reply ndmp_data_start_backup_reply_v2;
typedef ndmp_data_start_backup_reply ndmp_data_start_backup_reply_v3;
typedef ndmp_data_start_backup_reply ndmp_data_start_backup_reply_v4;

typedef ndmp_name ndmp_name_v2;

typedef ndmp_data_start_recover_request ndmp_data_start_recover_request_v2;
typedef ndmp_data_start_recover_request_v3 ndmp_data_start_recover_request_v4;

typedef ndmp_data_start_recover_reply ndmp_data_start_recover_reply_v2;
typedef ndmp_data_start_recover_reply ndmp_data_start_recover_reply_v3;
typedef ndmp_data_start_recover_reply ndmp_data_start_recover_reply_v4;
typedef ndmp_data_start_recover_reply ndmp_data_start_recover_filehist_reply_v4;

typedef ndmp_data_abort_reply ndmp_data_abort_reply_v2;
typedef ndmp_data_abort_reply ndmp_data_abort_reply_v3;
typedef ndmp_data_abort_reply ndmp_data_abort_reply_v4;

typedef ndmp_data_stop_reply ndmp_data_stop_reply_v2;
typedef ndmp_data_stop_reply ndmp_data_stop_reply_v3;
typedef ndmp_data_stop_reply ndmp_data_stop_reply_v4;

typedef ndmp_data_get_env_reply ndmp_data_get_env_reply_v2;
typedef ndmp_data_get_env_reply ndmp_data_get_env_reply_v3;
typedef ndmp_data_get_env_reply ndmp_data_get_env_reply_v4;

typedef ndmp_data_listen_request_v3 ndmp_data_listen_request_v4;

typedef ndmp_data_connect_reply_v3 ndmp_data_connect_reply_v4;

typedef ndmp_notify_data_halted_request ndmp_notify_data_halted_request_v2;
typedef ndmp_notify_data_halted_request ndmp_notify_data_halted_request_v3;

typedef ndmp_notify_connected_request ndmp_notify_connection_status_request_v2;
typedef ndmp_notify_connected_request ndmp_notify_connection_status_request_v3;
typedef ndmp_notify_connected_request ndmp_notify_connection_status_request_v4;

typedef ndmp_notify_mover_paused_request ndmp_notify_mover_paused_request_v2;
typedef ndmp_notify_mover_paused_request ndmp_notify_mover_paused_request_v3;
typedef ndmp_notify_mover_paused_request ndmp_notify_mover_paused_request_v4;

typedef ndmp_notify_mover_halted_request ndmp_notify_mover_halted_request_v2;
typedef ndmp_notify_mover_halted_request ndmp_notify_mover_halted_request_v3;

typedef ndmp_notify_data_read_request ndmp_notify_data_read_request_v2;
typedef ndmp_notify_data_read_request ndmp_notify_data_read_request_v3;
typedef ndmp_notify_data_read_request ndmp_notify_data_read_request_v4;

typedef ndmp_log_log_request ndmp_log_log_request_v2;
typedef ndmp_log_log_request ndmp_log_log_request_v3;
typedef ndmp_log_log_request ndmp_log_log_request_v4;

typedef ndmp_log_debug_request ndmp_log_debug_request_v2;
typedef ndmp_log_debug_request ndmp_log_debug_request_v3;
typedef ndmp_log_debug_request ndmp_log_debug_request_v4;

typedef ndmp_log_file_request ndmp_log_file_request_v2;

typedef ndmp_file_v3 ndmp_file;

typedef ndmp_dir_v3 ndmp_dir;

typedef ndmp_node_v3 ndmp_node;

typedef ndmp_fh_add_unix_path_request ndmp_fh_add_unix_path_request_v2;
typedef ndmp_fh_add_unix_path_request ndmp_fh_add_unix_path_request_v3;

typedef ndmp_fh_add_file_request_v3 ndmp_fh_add_file_request_v4;

typedef ndmp_fh_add_unix_dir_request ndmp_fh_add_unix_dir_request_v2;
typedef ndmp_fh_add_unix_dir_request ndmp_fh_add_unix_dir_request_v3;

typedef ndmp_fh_add_dir_request_v3 ndmp_fh_add_dir_request_v4;

typedef ndmp_fh_add_unix_node_request ndmp_fh_add_unix_node_request_v2;
typedef ndmp_fh_add_unix_node_request ndmp_fh_add_unix_node_request_v3;

typedef ndmp_fh_add_node_request_v3 ndmp_fh_add_node_request_v4;

/* the xdr functions */
extern  bool_t xdr_ndmp_u_quad(XDR *, ndmp_u_quad*);
extern  bool_t xdr_ndmp_pval(XDR *, ndmp_pval*);
extern  bool_t xdr_ndmp_scsi_device(XDR *, ndmp_scsi_device*);
extern  bool_t xdr_ndmp_tape_device(XDR *, ndmp_tape_device*);
extern  bool_t xdr_ndmp_error(XDR *, ndmp_error*);
extern  bool_t xdr_ndmp_header_message_type(XDR *, ndmp_header_message_type*);
extern  bool_t xdr_ndmp_message(XDR *, ndmp_message*);
extern  bool_t xdr_ndmp_header(XDR *, ndmp_header*);
extern  bool_t xdr_ndmp_connect_open_request(XDR *, ndmp_connect_open_request*);
extern  bool_t xdr_ndmp_connect_open_reply(XDR *, ndmp_connect_open_reply*);
extern  bool_t xdr_ndmp_auth_type(XDR *, ndmp_auth_type*);
extern  bool_t xdr_ndmp_auth_text(XDR *, ndmp_auth_text*);
extern  bool_t xdr_ndmp_auth_md5(XDR *, ndmp_auth_md5*);
extern  bool_t xdr_ndmp_auth_data(XDR *, ndmp_auth_data*);
extern  bool_t xdr_ndmp_connect_client_auth_request(XDR *, ndmp_connect_client_auth_request*);
extern  bool_t xdr_ndmp_connect_client_auth_reply(XDR *, ndmp_connect_client_auth_reply*);
extern  bool_t xdr_ndmp_auth_attr(XDR *, ndmp_auth_attr*);
extern  bool_t xdr_ndmp_connect_server_auth_request(XDR *, ndmp_connect_server_auth_request*);
extern  bool_t xdr_ndmp_connect_server_auth_reply(XDR *, ndmp_connect_server_auth_reply*);
extern  bool_t xdr_ndmp_auth_text_v3(XDR *, ndmp_auth_text_v3*);
extern  bool_t xdr_ndmp_auth_md5_v3(XDR *, ndmp_auth_md5_v3*);
extern  bool_t xdr_ndmp_auth_data_v3(XDR *, ndmp_auth_data_v3*);
extern  bool_t xdr_ndmp_connect_client_auth_request_v3(XDR *, ndmp_connect_client_auth_request_v3*);
extern  bool_t xdr_ndmp_connect_client_auth_reply_v3(XDR *, ndmp_connect_client_auth_reply_v3*);
extern  bool_t xdr_ndmp_config_get_host_info_reply(XDR *, ndmp_config_get_host_info_reply*);
extern  bool_t xdr_ndmp_config_get_butype_attr_request(XDR *, ndmp_config_get_butype_attr_request*);
extern  bool_t xdr_ndmp_config_get_butype_attr_reply(XDR *, ndmp_config_get_butype_attr_reply*);
extern  bool_t xdr_ndmp_addr_type(XDR *, ndmp_addr_type*);
extern  bool_t xdr_ndmp_config_get_mover_type_reply(XDR *, ndmp_config_get_mover_type_reply*);
extern  bool_t xdr_ndmp_config_get_auth_attr_request(XDR *, ndmp_config_get_auth_attr_request*);
extern  bool_t xdr_ndmp_config_get_auth_attr_reply(XDR *, ndmp_config_get_auth_attr_reply*);
extern  bool_t xdr_ndmp_config_get_host_info_reply_v3(XDR *, ndmp_config_get_host_info_reply_v3*);
extern  bool_t xdr_ndmp_config_get_connection_type_reply_v3(XDR *, ndmp_config_get_connection_type_reply_v3*);
extern  bool_t xdr_ndmp_config_get_server_info_reply_v3(XDR *, ndmp_config_get_server_info_reply_v3*);
extern  bool_t xdr_ndmp_butype_info(XDR *, ndmp_butype_info*);
extern  bool_t xdr_ndmp_config_get_butype_info_reply_v3(XDR *, ndmp_config_get_butype_info_reply_v3*);
extern  bool_t xdr_ndmp_fs_info_v3(XDR *, ndmp_fs_info_v3*);
extern  bool_t xdr_ndmp_config_get_fs_info_reply_v3(XDR *, ndmp_config_get_fs_info_reply_v3*);
extern  bool_t xdr_ndmp_device_capability_v3(XDR *, ndmp_device_capability_v3*);
extern  bool_t xdr_ndmp_device_info_v3(XDR *, ndmp_device_info_v3*);
extern  bool_t xdr_ndmp_config_get_tape_info_reply_v3(XDR *, ndmp_config_get_tape_info_reply_v3*);
extern  bool_t xdr_ndmp_config_get_scsi_info_reply_v3(XDR *, ndmp_config_get_scsi_info_reply_v3*);
extern  bool_t xdr_ndmp_config_get_butype_info_reply_v4(XDR *, ndmp_config_get_butype_info_reply_v4*);
extern  bool_t xdr_ndmp_class_list(XDR *, ndmp_class_list*);
extern  bool_t xdr_ndmp_class_version(XDR *, ndmp_class_version*);
extern  bool_t xdr_ndmp_config_get_ext_list_reply(XDR *, ndmp_config_get_ext_list_reply*);
extern  bool_t xdr_ndmp_config_set_ext_list_request(XDR *, ndmp_config_set_ext_list_request*);
extern  bool_t xdr_ndmp_config_set_ext_list_reply(XDR *, ndmp_config_set_ext_list_reply*);
extern  bool_t xdr_ndmp_scsi_open_request(XDR *, ndmp_scsi_open_request*);
extern  bool_t xdr_ndmp_scsi_open_reply(XDR *, ndmp_scsi_open_reply*);
extern  bool_t xdr_ndmp_scsi_close_reply(XDR *, ndmp_scsi_close_reply*);
extern  bool_t xdr_ndmp_scsi_get_state_reply(XDR *, ndmp_scsi_get_state_reply*);
extern  bool_t xdr_ndmp_scsi_set_target_request(XDR *, ndmp_scsi_set_target_request*);
extern  bool_t xdr_ndmp_scsi_set_target_reply(XDR *, ndmp_scsi_set_target_reply*);
extern  bool_t xdr_ndmp_scsi_reset_device_reply(XDR *, ndmp_scsi_reset_device_reply*);
extern  bool_t xdr_ndmp_scsi_reset_bus_reply(XDR *, ndmp_scsi_reset_bus_reply*);
extern  bool_t xdr_ndmp_execute_cdb_request(XDR *, ndmp_execute_cdb_request*);
extern  bool_t xdr_ndmp_execute_cdb_reply(XDR *, ndmp_execute_cdb_reply*);
extern  bool_t xdr_ndmp_scsi_open_request_v3(XDR *, ndmp_scsi_open_request_v3*);
extern  bool_t xdr_ndmp_scsi_set_target_request_v3(XDR *, ndmp_scsi_set_target_request_v3*);
extern  bool_t xdr_ndmp_tape_open_mode(XDR *, ndmp_tape_open_mode*);
extern  bool_t xdr_ndmp_tape_open_request(XDR *, ndmp_tape_open_request*);
extern  bool_t xdr_ndmp_tape_open_reply(XDR *, ndmp_tape_open_reply*);
extern  bool_t xdr_ndmp_tape_close_reply(XDR *, ndmp_tape_close_reply*);
extern  bool_t xdr_ndmp_tape_get_state_reply(XDR *, ndmp_tape_get_state_reply*);
extern  bool_t xdr_ndmp_tape_mtio_op(XDR *, ndmp_tape_mtio_op*);
extern  bool_t xdr_ndmp_tape_mtio_request(XDR *, ndmp_tape_mtio_request*);
extern  bool_t xdr_ndmp_tape_mtio_reply(XDR *, ndmp_tape_mtio_reply*);
extern  bool_t xdr_ndmp_tape_write_request(XDR *, ndmp_tape_write_request*);
extern  bool_t xdr_ndmp_tape_write_reply(XDR *, ndmp_tape_write_reply*);
extern  bool_t xdr_ndmp_tape_read_request(XDR *, ndmp_tape_read_request*);
extern  bool_t xdr_ndmp_tape_read_reply(XDR *, ndmp_tape_read_reply*);
extern  bool_t xdr_ndmp_tape_execute_cdb_request(XDR *, ndmp_tape_execute_cdb_request*);
extern  bool_t xdr_ndmp_tape_execute_cdb_reply(XDR *, ndmp_tape_execute_cdb_reply*);
extern  bool_t xdr_ndmp_tape_open_request_v3(XDR *, ndmp_tape_open_request_v3*);
extern  bool_t xdr_ndmp_tape_get_state_reply_v3(XDR *, ndmp_tape_get_state_reply_v3*);
extern  bool_t xdr_ndmp_tape_get_state_reply_v4(XDR *, ndmp_tape_get_state_reply_v4*);
extern  bool_t xdr_ndmp_mover_mode(XDR *, ndmp_mover_mode*);
extern  bool_t xdr_ndmp_mover_state(XDR *, ndmp_mover_state*);
extern  bool_t xdr_ndmp_mover_pause_reason(XDR *, ndmp_mover_pause_reason*);
extern  bool_t xdr_ndmp_mover_halt_reason(XDR *, ndmp_mover_halt_reason*);
extern  bool_t xdr_ndmp_mover_get_state_reply(XDR *, ndmp_mover_get_state_reply*);
extern  bool_t xdr_ndmp_tcp_addr(XDR *, ndmp_tcp_addr*);
extern  bool_t xdr_ndmp_mover_addr(XDR *, ndmp_mover_addr*);
extern  bool_t xdr_ndmp_mover_listen_request(XDR *, ndmp_mover_listen_request*);
extern  bool_t xdr_ndmp_mover_listen_reply(XDR *, ndmp_mover_listen_reply*);
extern  bool_t xdr_ndmp_mover_set_record_size_request(XDR *, ndmp_mover_set_record_size_request*);
extern  bool_t xdr_ndmp_mover_set_record_size_reply(XDR *, ndmp_mover_set_record_size_reply*);
extern  bool_t xdr_ndmp_mover_set_window_request(XDR *, ndmp_mover_set_window_request*);
extern  bool_t xdr_ndmp_mover_set_window_reply(XDR *, ndmp_mover_set_window_reply*);
extern  bool_t xdr_ndmp_mover_continue_reply(XDR *, ndmp_mover_continue_reply*);
extern  bool_t xdr_ndmp_mover_abort_reply(XDR *, ndmp_mover_abort_reply*);
extern  bool_t xdr_ndmp_mover_stop_reply(XDR *, ndmp_mover_stop_reply*);
extern  bool_t xdr_ndmp_mover_read_request(XDR *, ndmp_mover_read_request*);
extern  bool_t xdr_ndmp_mover_read_reply(XDR *, ndmp_mover_read_reply*);
extern  bool_t xdr_ndmp_mover_close_reply(XDR *, ndmp_mover_close_reply*);
extern  bool_t xdr_ndmp_fc_addr_v3(XDR *, ndmp_fc_addr_v3*);
extern  bool_t xdr_ndmp_ipc_addr_v3(XDR *, ndmp_ipc_addr_v3*);
extern  bool_t xdr_ndmp_addr_v3(XDR *, ndmp_addr_v3*);
extern  bool_t xdr_ndmp_mover_get_state_reply_v3(XDR *, ndmp_mover_get_state_reply_v3*);
extern  bool_t xdr_ndmp_mover_listen_reply_v3(XDR *, ndmp_mover_listen_reply_v3*);
extern  bool_t xdr_ndmp_mover_connect_request_v3(XDR *, ndmp_mover_connect_request_v3*);
extern  bool_t xdr_ndmp_mover_connect_reply_v3(XDR *, ndmp_mover_connect_reply_v3*);
extern  bool_t xdr_ndmp_tcp_addr_v4(XDR *, ndmp_tcp_addr_v4*);
extern  bool_t xdr_ndmp_addr_v4(XDR *, ndmp_addr_v4*);
extern  bool_t xdr_ndmp_mover_connect_request_v4(XDR *, ndmp_mover_connect_request_v4*);
extern  bool_t xdr_ndmp_mover_listen_reply_v4(XDR *, ndmp_mover_listen_reply_v4*);
extern  bool_t xdr_ndmp_mover_get_state_reply_v4(XDR *, ndmp_mover_get_state_reply_v4*);
extern  bool_t xdr_ndmp_data_operation(XDR *, ndmp_data_operation*);
extern  bool_t xdr_ndmp_data_state(XDR *, ndmp_data_state*);
extern  bool_t xdr_ndmp_data_halt_reason(XDR *, ndmp_data_halt_reason*);
extern  bool_t xdr_ndmp_data_get_state_reply(XDR *, ndmp_data_get_state_reply*);
extern  bool_t xdr_ndmp_data_start_backup_request(XDR *, ndmp_data_start_backup_request*);
extern  bool_t xdr_ndmp_data_start_backup_reply(XDR *, ndmp_data_start_backup_reply*);
extern  bool_t xdr_ndmp_name(XDR *, ndmp_name*);
extern  bool_t xdr_ndmp_data_start_recover_request(XDR *, ndmp_data_start_recover_request*);
extern  bool_t xdr_ndmp_data_start_recover_reply(XDR *, ndmp_data_start_recover_reply*);
extern  bool_t xdr_ndmp_data_abort_reply(XDR *, ndmp_data_abort_reply*);
extern  bool_t xdr_ndmp_data_stop_reply(XDR *, ndmp_data_stop_reply*);
extern  bool_t xdr_ndmp_data_get_env_reply(XDR *, ndmp_data_get_env_reply*);
extern  bool_t xdr_ndmp_notify_data_halted_request(XDR *, ndmp_notify_data_halted_request*);
extern  bool_t xdr_ndmp_data_get_state_reply_v3(XDR *, ndmp_data_get_state_reply_v3*);
extern  bool_t xdr_ndmp_data_start_backup_request_v3(XDR *, ndmp_data_start_backup_request_v3*);
extern  bool_t xdr_ndmp_name_v3(XDR *, ndmp_name_v3*);
extern  bool_t xdr_ndmp_data_start_recover_request_v3(XDR *, ndmp_data_start_recover_request_v3*);
extern  bool_t xdr_ndmp_data_listen_request_v3(XDR *, ndmp_data_listen_request_v3*);
extern  bool_t xdr_ndmp_data_listen_reply_v3(XDR *, ndmp_data_listen_reply_v3*);
extern  bool_t xdr_ndmp_data_connect_request_v3(XDR *, ndmp_data_connect_request_v3*);
extern  bool_t xdr_ndmp_data_connect_reply_v3(XDR *, ndmp_data_connect_reply_v3*);
extern  bool_t xdr_ndmp_data_get_state_reply_v4(XDR *, ndmp_data_get_state_reply_v4*);
extern  bool_t xdr_ndmp_data_listen_reply_v4(XDR *, ndmp_data_listen_reply_v4*);
extern  bool_t xdr_ndmp_data_connect_request_v4(XDR *, ndmp_data_connect_request_v4*);
extern  bool_t xdr_ndmp_connect_reason(XDR *, ndmp_connect_reason*);
extern  bool_t xdr_ndmp_notify_connected_request(XDR *, ndmp_notify_connected_request*);
extern  bool_t xdr_ndmp_notify_mover_paused_request(XDR *, ndmp_notify_mover_paused_request*);
extern  bool_t xdr_ndmp_notify_mover_halted_request(XDR *, ndmp_notify_mover_halted_request*);
extern  bool_t xdr_ndmp_notify_data_read_request(XDR *, ndmp_notify_data_read_request*);
extern  bool_t xdr_ndmp_notify_data_halted_request_v4(XDR *, ndmp_notify_data_halted_request_v4*);
extern  bool_t xdr_ndmp_notify_mover_halted_request_v4(XDR *, ndmp_notify_mover_halted_request_v4*);
extern  bool_t xdr_ndmp_log_log_request(XDR *, ndmp_log_log_request*);
extern  bool_t xdr_ndmp_debug_level(XDR *, ndmp_debug_level*);
extern  bool_t xdr_ndmp_log_debug_request(XDR *, ndmp_log_debug_request*);
extern  bool_t xdr_ndmp_log_file_request(XDR *, ndmp_log_file_request*);
extern  bool_t xdr_ndmp_log_type(XDR *, ndmp_log_type*);
extern  bool_t xdr_ndmp_log_message_request_v3(XDR *, ndmp_log_message_request_v3*);
extern  bool_t xdr_ndmp_log_file_request_v3(XDR *, ndmp_log_file_request_v3*);
extern  bool_t xdr_ndmp_has_associated_message(XDR *, ndmp_has_associated_message*);
extern  bool_t xdr_ndmp_recovery_status(XDR *, ndmp_recovery_status*);
extern  bool_t xdr_ndmp_log_message_request_v4(XDR *, ndmp_log_message_request_v4*);
extern  bool_t xdr_ndmp_log_file_request_v4(XDR *, ndmp_log_file_request_v4*);
extern  bool_t xdr_ndmp_unix_path(XDR *, ndmp_unix_path*);
extern  bool_t xdr_ndmp_file_type(XDR *, ndmp_file_type*);
extern  bool_t xdr_ndmp_unix_file_stat(XDR *, ndmp_unix_file_stat*);
extern  bool_t xdr_ndmp_fh_unix_path(XDR *, ndmp_fh_unix_path*);
extern  bool_t xdr_ndmp_fh_add_unix_path_request(XDR *, ndmp_fh_add_unix_path_request*);
extern  bool_t xdr_ndmp_fh_unix_dir(XDR *, ndmp_fh_unix_dir*);
extern  bool_t xdr_ndmp_fh_add_unix_dir_request(XDR *, ndmp_fh_add_unix_dir_request*);
extern  bool_t xdr_ndmp_fh_unix_node(XDR *, ndmp_fh_unix_node*);
extern  bool_t xdr_ndmp_fh_add_unix_node_request(XDR *, ndmp_fh_add_unix_node_request*);
extern  bool_t xdr_ndmp_fs_type(XDR *, ndmp_fs_type*);
extern  bool_t xdr_ndmp_path_v3(XDR *, ndmp_path_v3*);
extern  bool_t xdr_ndmp_nt_path_v3(XDR *, ndmp_nt_path_v3*);
extern  bool_t xdr_ndmp_file_name_v3(XDR *, ndmp_file_name_v3*);
extern  bool_t xdr_ndmp_file_stat_v3(XDR *, ndmp_file_stat_v3*);
extern  bool_t xdr_ndmp_file_v3(XDR *, ndmp_file_v3*);
extern  bool_t xdr_ndmp_fh_add_file_request_v3(XDR *, ndmp_fh_add_file_request_v3*);
extern  bool_t xdr_ndmp_dir_v3(XDR *, ndmp_dir_v3*);
extern  bool_t xdr_ndmp_fh_add_dir_request_v3(XDR *, ndmp_fh_add_dir_request_v3*);
extern  bool_t xdr_ndmp_node_v3(XDR *, ndmp_node_v3*);
extern  bool_t xdr_ndmp_fh_add_node_request_v3(XDR *, ndmp_fh_add_node_request_v3*);
extern  bool_t xdr_ndmp_auth_text_v2(XDR *, ndmp_auth_text_v2*);
extern  bool_t xdr_ndmp_auth_text_v4(XDR *, ndmp_auth_text_v4*);
extern  bool_t xdr_ndmp_auth_md5_v2(XDR *, ndmp_auth_md5_v2*);
extern  bool_t xdr_ndmp_auth_md5_v4(XDR *, ndmp_auth_md5_v4*);
extern  bool_t xdr_ndmp_auth_data_v2(XDR *, ndmp_auth_data_v2*);
extern  bool_t xdr_ndmp_auth_data_v4(XDR *, ndmp_auth_data_v4*);
extern  bool_t xdr_ndmp_connect_open_request_v2(XDR *, ndmp_connect_open_request_v2*);
extern  bool_t xdr_ndmp_connect_open_request_v3(XDR *, ndmp_connect_open_request_v3*);
extern  bool_t xdr_ndmp_connect_open_request_v4(XDR *, ndmp_connect_open_request_v4*);
extern  bool_t xdr_ndmp_connect_open_reply_v2(XDR *, ndmp_connect_open_reply_v2*);
extern  bool_t xdr_ndmp_connect_open_reply_v3(XDR *, ndmp_connect_open_reply_v3*);
extern  bool_t xdr_ndmp_connect_open_reply_v4(XDR *, ndmp_connect_open_reply_v4*);
extern  bool_t xdr_ndmp_connect_client_auth_request_v2(XDR *, ndmp_connect_client_auth_request_v2*);
extern  bool_t xdr_ndmp_connect_client_auth_request_v4(XDR *, ndmp_connect_client_auth_request_v4*);
extern  bool_t xdr_ndmp_connect_client_auth_reply_v2(XDR *, ndmp_connect_client_auth_reply_v2*);
extern  bool_t xdr_ndmp_connect_client_auth_reply_v4(XDR *, ndmp_connect_client_auth_reply_v4*);
extern  bool_t xdr_ndmp_connect_server_auth_request_v2(XDR *, ndmp_connect_server_auth_request_v2*);
extern  bool_t xdr_ndmp_connect_server_auth_request_v3(XDR *, ndmp_connect_server_auth_request_v3*);
extern  bool_t xdr_ndmp_connect_server_auth_request_v4(XDR *, ndmp_connect_server_auth_request_v4*);
extern  bool_t xdr_ndmp_connect_server_auth_reply_v2(XDR *, ndmp_connect_server_auth_reply_v2*);
extern  bool_t xdr_ndmp_connect_server_auth_reply_v3(XDR *, ndmp_connect_server_auth_reply_v3*);
extern  bool_t xdr_ndmp_connect_server_auth_reply_v4(XDR *, ndmp_connect_server_auth_reply_v4*);
extern  bool_t xdr_ndmp_config_get_host_info_reply_v2(XDR *, ndmp_config_get_host_info_reply_v2*);
extern  bool_t xdr_ndmp_config_get_host_info_reply_v4(XDR *, ndmp_config_get_host_info_reply_v4*);
extern  bool_t xdr_ndmp_config_get_butype_attr_request_v2(XDR *, ndmp_config_get_butype_attr_request_v2*);
extern  bool_t xdr_ndmp_config_get_butype_attr_reply_v2(XDR *, ndmp_config_get_butype_attr_reply_v2*);
extern  bool_t xdr_ndmp_config_get_mover_type_reply_v2(XDR *, ndmp_config_get_mover_type_reply_v2*);
extern  bool_t xdr_ndmp_config_get_auth_attr_request_v2(XDR *, ndmp_config_get_auth_attr_request_v2*);
extern  bool_t xdr_ndmp_config_get_auth_attr_request_v3(XDR *, ndmp_config_get_auth_attr_request_v3*);
extern  bool_t xdr_ndmp_config_get_auth_attr_request_v4(XDR *, ndmp_config_get_auth_attr_request_v4*);
extern  bool_t xdr_ndmp_config_get_auth_attr_reply_v2(XDR *, ndmp_config_get_auth_attr_reply_v2*);
extern  bool_t xdr_ndmp_config_get_auth_attr_reply_v3(XDR *, ndmp_config_get_auth_attr_reply_v3*);
extern  bool_t xdr_ndmp_config_get_auth_attr_reply_v4(XDR *, ndmp_config_get_auth_attr_reply_v4*);
extern  bool_t xdr_ndmp_config_get_connection_type_reply_v4(XDR *, ndmp_config_get_connection_type_reply_v4*);
extern  bool_t xdr_ndmp_config_get_server_info_reply_v4(XDR *, ndmp_config_get_server_info_reply_v4*);
extern  bool_t xdr_ndmp_fs_info_v4(XDR *, ndmp_fs_info_v4*);
extern  bool_t xdr_ndmp_config_get_fs_info_reply_v4(XDR *, ndmp_config_get_fs_info_reply_v4*);
extern  bool_t xdr_ndmp_device_info_v4(XDR *, ndmp_device_info_v4*);
extern  bool_t xdr_ndmp_config_get_tape_info_reply_v4(XDR *, ndmp_config_get_tape_info_reply_v4*);
extern  bool_t xdr_ndmp_config_get_scsi_info_reply_v4(XDR *, ndmp_config_get_scsi_info_reply_v4*);
extern  bool_t xdr_ndmp_config_get_ext_list_reply_v4(XDR *, ndmp_config_get_ext_list_reply_v4*);
extern  bool_t xdr_ndmp_config_set_ext_list_request_v4(XDR *, ndmp_config_set_ext_list_request_v4*);
extern  bool_t xdr_ndmp_config_set_ext_list_reply_v4(XDR *, ndmp_config_set_ext_list_reply_v4*);
extern  bool_t xdr_ndmp_scsi_open_request_v2(XDR *, ndmp_scsi_open_request_v2*);
extern  bool_t xdr_ndmp_scsi_open_request_v4(XDR *, ndmp_scsi_open_request_v4*);
extern  bool_t xdr_ndmp_scsi_open_reply_v2(XDR *, ndmp_scsi_open_reply_v2*);
extern  bool_t xdr_ndmp_scsi_open_reply_v3(XDR *, ndmp_scsi_open_reply_v3*);
extern  bool_t xdr_ndmp_scsi_open_reply_v4(XDR *, ndmp_scsi_open_reply_v4*);
extern  bool_t xdr_ndmp_scsi_close_reply_v2(XDR *, ndmp_scsi_close_reply_v2*);
extern  bool_t xdr_ndmp_scsi_close_reply_v3(XDR *, ndmp_scsi_close_reply_v3*);
extern  bool_t xdr_ndmp_scsi_close_reply_v4(XDR *, ndmp_scsi_close_reply_v4*);
extern  bool_t xdr_ndmp_scsi_get_state_reply_v2(XDR *, ndmp_scsi_get_state_reply_v2*);
extern  bool_t xdr_ndmp_scsi_get_state_reply_v3(XDR *, ndmp_scsi_get_state_reply_v3*);
extern  bool_t xdr_ndmp_scsi_get_state_reply_v4(XDR *, ndmp_scsi_get_state_reply_v4*);
extern  bool_t xdr_ndmp_scsi_set_target_request_v2(XDR *, ndmp_scsi_set_target_request_v2*);
extern  bool_t xdr_ndmp_scsi_set_target_reply_v2(XDR *, ndmp_scsi_set_target_reply_v2*);
extern  bool_t xdr_ndmp_scsi_set_target_reply_v3(XDR *, ndmp_scsi_set_target_reply_v3*);
extern  bool_t xdr_ndmp_scsi_reset_device_reply_v2(XDR *, ndmp_scsi_reset_device_reply_v2*);
extern  bool_t xdr_ndmp_scsi_reset_device_reply_v3(XDR *, ndmp_scsi_reset_device_reply_v3*);
extern  bool_t xdr_ndmp_scsi_reset_device_reply_v4(XDR *, ndmp_scsi_reset_device_reply_v4*);
extern  bool_t xdr_ndmp_scsi_reset_bus_reply_v2(XDR *, ndmp_scsi_reset_bus_reply_v2*);
extern  bool_t xdr_ndmp_scsi_reset_bus_reply_v3(XDR *, ndmp_scsi_reset_bus_reply_v3*);
extern  bool_t xdr_ndmp_scsi_execute_cdb_request_v2(XDR *, ndmp_scsi_execute_cdb_request_v2*);
extern  bool_t xdr_ndmp_scsi_execute_cdb_request_v3(XDR *, ndmp_scsi_execute_cdb_request_v3*);
extern  bool_t xdr_ndmp_scsi_execute_cdb_request_v4(XDR *, ndmp_scsi_execute_cdb_request_v4*);
extern  bool_t xdr_ndmp_scsi_execute_cdb_reply_v2(XDR *, ndmp_scsi_execute_cdb_reply_v2*);
extern  bool_t xdr_ndmp_scsi_execute_cdb_reply_v3(XDR *, ndmp_scsi_execute_cdb_reply_v3*);
extern  bool_t xdr_ndmp_scsi_execute_cdb_reply_v4(XDR *, ndmp_scsi_execute_cdb_reply_v4*);
extern  bool_t xdr_ndmp_tape_open_request_v2(XDR *, ndmp_tape_open_request_v2*);
extern  bool_t xdr_ndmp_tape_open_request_v4(XDR *, ndmp_tape_open_request_v4*);
extern  bool_t xdr_ndmp_tape_open_reply_v2(XDR *, ndmp_tape_open_reply_v2*);
extern  bool_t xdr_ndmp_tape_open_reply_v3(XDR *, ndmp_tape_open_reply_v3*);
extern  bool_t xdr_ndmp_tape_open_reply_v4(XDR *, ndmp_tape_open_reply_v4*);
extern  bool_t xdr_ndmp_tape_close_reply_v2(XDR *, ndmp_tape_close_reply_v2*);
extern  bool_t xdr_ndmp_tape_close_reply_v3(XDR *, ndmp_tape_close_reply_v3*);
extern  bool_t xdr_ndmp_tape_close_reply_v4(XDR *, ndmp_tape_close_reply_v4*);
extern  bool_t xdr_ndmp_tape_get_state_reply_v2(XDR *, ndmp_tape_get_state_reply_v2*);
extern  bool_t xdr_ndmp_tape_mtio_request_v2(XDR *, ndmp_tape_mtio_request_v2*);
extern  bool_t xdr_ndmp_tape_mtio_request_v3(XDR *, ndmp_tape_mtio_request_v3*);
extern  bool_t xdr_ndmp_tape_mtio_request_v4(XDR *, ndmp_tape_mtio_request_v4*);
extern  bool_t xdr_ndmp_tape_mtio_reply_v2(XDR *, ndmp_tape_mtio_reply_v2*);
extern  bool_t xdr_ndmp_tape_mtio_reply_v3(XDR *, ndmp_tape_mtio_reply_v3*);
extern  bool_t xdr_ndmp_tape_mtio_reply_v4(XDR *, ndmp_tape_mtio_reply_v4*);
extern  bool_t xdr_ndmp_tape_write_request_v2(XDR *, ndmp_tape_write_request_v2*);
extern  bool_t xdr_ndmp_tape_write_request_v3(XDR *, ndmp_tape_write_request_v3*);
extern  bool_t xdr_ndmp_tape_write_request_v4(XDR *, ndmp_tape_write_request_v4*);
extern  bool_t xdr_ndmp_tape_write_reply_v2(XDR *, ndmp_tape_write_reply_v2*);
extern  bool_t xdr_ndmp_tape_write_reply_v3(XDR *, ndmp_tape_write_reply_v3*);
extern  bool_t xdr_ndmp_tape_write_reply_v4(XDR *, ndmp_tape_write_reply_v4*);
extern  bool_t xdr_ndmp_tape_read_request_v2(XDR *, ndmp_tape_read_request_v2*);
extern  bool_t xdr_ndmp_tape_read_request_v3(XDR *, ndmp_tape_read_request_v3*);
extern  bool_t xdr_ndmp_tape_read_request_v4(XDR *, ndmp_tape_read_request_v4*);
extern  bool_t xdr_ndmp_tape_read_reply_v2(XDR *, ndmp_tape_read_reply_v2*);
extern  bool_t xdr_ndmp_tape_read_reply_v3(XDR *, ndmp_tape_read_reply_v3*);
extern  bool_t xdr_ndmp_tape_read_reply_v4(XDR *, ndmp_tape_read_reply_v4*);
extern  bool_t xdr_ndmp_tape_execute_cdb_request_v2(XDR *, ndmp_tape_execute_cdb_request_v2*);
extern  bool_t xdr_ndmp_tape_execute_cdb_request_v3(XDR *, ndmp_tape_execute_cdb_request_v3*);
extern  bool_t xdr_ndmp_tape_execute_cdb_request_v4(XDR *, ndmp_tape_execute_cdb_request_v4*);
extern  bool_t xdr_ndmp_tape_execute_cdb_reply_v2(XDR *, ndmp_tape_execute_cdb_reply_v2*);
extern  bool_t xdr_ndmp_tape_execute_cdb_reply_v3(XDR *, ndmp_tape_execute_cdb_reply_v3*);
extern  bool_t xdr_ndmp_tape_execute_cdb_reply_v4(XDR *, ndmp_tape_execute_cdb_reply_v4*);
extern  bool_t xdr_ndmp_fc_addr(XDR *, ndmp_fc_addr*);
extern  bool_t xdr_ndmp_ipc_addr(XDR *, ndmp_ipc_addr*);
extern  bool_t xdr_ndmp_mover_get_state_reply_v2(XDR *, ndmp_mover_get_state_reply_v2*);
extern  bool_t xdr_ndmp_mover_listen_request_v2(XDR *, ndmp_mover_listen_request_v2*);
extern  bool_t xdr_ndmp_mover_listen_request_v3(XDR *, ndmp_mover_listen_request_v3*);
extern  bool_t xdr_ndmp_mover_listen_request_v4(XDR *, ndmp_mover_listen_request_v4*);
extern  bool_t xdr_ndmp_mover_listen_reply_v2(XDR *, ndmp_mover_listen_reply_v2*);
extern  bool_t xdr_ndmp_mover_set_record_size_request_v2(XDR *, ndmp_mover_set_record_size_request_v2*);
extern  bool_t xdr_ndmp_mover_set_record_size_request_v3(XDR *, ndmp_mover_set_record_size_request_v3*);
extern  bool_t xdr_ndmp_mover_set_record_size_request_v4(XDR *, ndmp_mover_set_record_size_request_v4*);
extern  bool_t xdr_ndmp_mover_set_record_size_reply_v2(XDR *, ndmp_mover_set_record_size_reply_v2*);
extern  bool_t xdr_ndmp_mover_set_record_size_reply_v3(XDR *, ndmp_mover_set_record_size_reply_v3*);
extern  bool_t xdr_ndmp_mover_set_record_size_reply_v4(XDR *, ndmp_mover_set_record_size_reply_v4*);
extern  bool_t xdr_ndmp_mover_set_window_request_v2(XDR *, ndmp_mover_set_window_request_v2*);
extern  bool_t xdr_ndmp_mover_set_window_request_v3(XDR *, ndmp_mover_set_window_request_v3*);
extern  bool_t xdr_ndmp_mover_set_window_request_v4(XDR *, ndmp_mover_set_window_request_v4*);
extern  bool_t xdr_ndmp_mover_set_window_reply_v2(XDR *, ndmp_mover_set_window_reply_v2*);
extern  bool_t xdr_ndmp_mover_set_window_reply_v3(XDR *, ndmp_mover_set_window_reply_v3*);
extern  bool_t xdr_ndmp_mover_set_window_reply_v4(XDR *, ndmp_mover_set_window_reply_v4*);
extern  bool_t xdr_ndmp_mover_continue_reply_v2(XDR *, ndmp_mover_continue_reply_v2*);
extern  bool_t xdr_ndmp_mover_continue_reply_v3(XDR *, ndmp_mover_continue_reply_v3*);
extern  bool_t xdr_ndmp_mover_continue_reply_v4(XDR *, ndmp_mover_continue_reply_v4*);
extern  bool_t xdr_ndmp_mover_abort_reply_v2(XDR *, ndmp_mover_abort_reply_v2*);
extern  bool_t xdr_ndmp_mover_abort_reply_v3(XDR *, ndmp_mover_abort_reply_v3*);
extern  bool_t xdr_ndmp_mover_abort_reply_v4(XDR *, ndmp_mover_abort_reply_v4*);
extern  bool_t xdr_ndmp_mover_stop_reply_v2(XDR *, ndmp_mover_stop_reply_v2*);
extern  bool_t xdr_ndmp_mover_stop_reply_v3(XDR *, ndmp_mover_stop_reply_v3*);
extern  bool_t xdr_ndmp_mover_stop_reply_v4(XDR *, ndmp_mover_stop_reply_v4*);
extern  bool_t xdr_ndmp_mover_read_request_v2(XDR *, ndmp_mover_read_request_v2*);
extern  bool_t xdr_ndmp_mover_read_request_v3(XDR *, ndmp_mover_read_request_v3*);
extern  bool_t xdr_ndmp_mover_read_request_v4(XDR *, ndmp_mover_read_request_v4*);
extern  bool_t xdr_ndmp_mover_read_reply_v2(XDR *, ndmp_mover_read_reply_v2*);
extern  bool_t xdr_ndmp_mover_read_reply_v3(XDR *, ndmp_mover_read_reply_v3*);
extern  bool_t xdr_ndmp_mover_read_reply_v4(XDR *, ndmp_mover_read_reply_v4*);
extern  bool_t xdr_ndmp_mover_close_reply_v2(XDR *, ndmp_mover_close_reply_v2*);
extern  bool_t xdr_ndmp_mover_close_reply_v3(XDR *, ndmp_mover_close_reply_v3*);
extern  bool_t xdr_ndmp_mover_close_reply_v4(XDR *, ndmp_mover_close_reply_v4*);
extern  bool_t xdr_ndmp_mover_connect_reply_v4(XDR *, ndmp_mover_connect_reply_v4*);
extern  bool_t xdr_ndmp_data_get_state_reply_v2(XDR *, ndmp_data_get_state_reply_v2*);
extern  bool_t xdr_ndmp_data_start_backup_request_v2(XDR *, ndmp_data_start_backup_request_v2*);
extern  bool_t xdr_ndmp_data_start_backup_request_v4(XDR *, ndmp_data_start_backup_request_v4*);
extern  bool_t xdr_ndmp_data_start_backup_reply_v2(XDR *, ndmp_data_start_backup_reply_v2*);
extern  bool_t xdr_ndmp_data_start_backup_reply_v3(XDR *, ndmp_data_start_backup_reply_v3*);
extern  bool_t xdr_ndmp_data_start_backup_reply_v4(XDR *, ndmp_data_start_backup_reply_v4*);
extern  bool_t xdr_ndmp_name_v2(XDR *, ndmp_name_v2*);
extern  bool_t xdr_ndmp_data_start_recover_request_v2(XDR *, ndmp_data_start_recover_request_v2*);
extern  bool_t xdr_ndmp_data_start_recover_request_v4(XDR *, ndmp_data_start_recover_request_v4*);
extern  bool_t xdr_ndmp_data_start_recover_reply_v2(XDR *, ndmp_data_start_recover_reply_v2*);
extern  bool_t xdr_ndmp_data_start_recover_reply_v3(XDR *, ndmp_data_start_recover_reply_v3*);
extern  bool_t xdr_ndmp_data_start_recover_reply_v4(XDR *, ndmp_data_start_recover_reply_v4*);
extern  bool_t xdr_ndmp_data_start_recover_filehist_reply_v4(XDR *,
		ndmp_data_start_recover_filehist_reply_v4*);
extern  bool_t xdr_ndmp_data_abort_reply_v2(XDR *, ndmp_data_abort_reply_v2*);
extern  bool_t xdr_ndmp_data_abort_reply_v3(XDR *, ndmp_data_abort_reply_v3*);
extern  bool_t xdr_ndmp_data_abort_reply_v4(XDR *, ndmp_data_abort_reply_v4*);
extern  bool_t xdr_ndmp_data_stop_reply_v2(XDR *, ndmp_data_stop_reply_v2*);
extern  bool_t xdr_ndmp_data_stop_reply_v3(XDR *, ndmp_data_stop_reply_v3*);
extern  bool_t xdr_ndmp_data_stop_reply_v4(XDR *, ndmp_data_stop_reply_v4*);
extern  bool_t xdr_ndmp_data_get_env_reply_v2(XDR *, ndmp_data_get_env_reply_v2*);
extern  bool_t xdr_ndmp_data_get_env_reply_v3(XDR *, ndmp_data_get_env_reply_v3*);
extern  bool_t xdr_ndmp_data_get_env_reply_v4(XDR *, ndmp_data_get_env_reply_v4*);
extern  bool_t xdr_ndmp_data_listen_request_v4(XDR *, ndmp_data_listen_request_v4*);
extern  bool_t xdr_ndmp_data_connect_reply_v4(XDR *, ndmp_data_connect_reply_v4*);
extern  bool_t xdr_ndmp_notify_data_halted_request_v2(XDR *, ndmp_notify_data_halted_request_v2*);
extern  bool_t xdr_ndmp_notify_data_halted_request_v3(XDR *, ndmp_notify_data_halted_request_v3*);
extern  bool_t xdr_ndmp_notify_connection_status_request_v2(XDR *, ndmp_notify_connection_status_request_v2*);
extern  bool_t xdr_ndmp_notify_connection_status_request_v3(XDR *, ndmp_notify_connection_status_request_v3*);
extern  bool_t xdr_ndmp_notify_connection_status_request_v4(XDR *, ndmp_notify_connection_status_request_v4*);
extern  bool_t xdr_ndmp_notify_mover_paused_request_v2(XDR *, ndmp_notify_mover_paused_request_v2*);
extern  bool_t xdr_ndmp_notify_mover_paused_request_v3(XDR *, ndmp_notify_mover_paused_request_v3*);
extern  bool_t xdr_ndmp_notify_mover_paused_request_v4(XDR *, ndmp_notify_mover_paused_request_v4*);
extern  bool_t xdr_ndmp_notify_mover_halted_request_v2(XDR *, ndmp_notify_mover_halted_request_v2*);
extern  bool_t xdr_ndmp_notify_mover_halted_request_v3(XDR *, ndmp_notify_mover_halted_request_v3*);
extern  bool_t xdr_ndmp_notify_data_read_request_v2(XDR *, ndmp_notify_data_read_request_v2*);
extern  bool_t xdr_ndmp_notify_data_read_request_v3(XDR *, ndmp_notify_data_read_request_v3*);
extern  bool_t xdr_ndmp_notify_data_read_request_v4(XDR *, ndmp_notify_data_read_request_v4*);
extern  bool_t xdr_ndmp_log_log_request_v2(XDR *, ndmp_log_log_request_v2*);
extern  bool_t xdr_ndmp_log_log_request_v3(XDR *, ndmp_log_log_request_v3*);
extern  bool_t xdr_ndmp_log_log_request_v4(XDR *, ndmp_log_log_request_v4*);
extern  bool_t xdr_ndmp_log_debug_request_v2(XDR *, ndmp_log_debug_request_v2*);
extern  bool_t xdr_ndmp_log_debug_request_v3(XDR *, ndmp_log_debug_request_v3*);
extern  bool_t xdr_ndmp_log_debug_request_v4(XDR *, ndmp_log_debug_request_v4*);
extern  bool_t xdr_ndmp_log_file_request_v2(XDR *, ndmp_log_file_request_v2*);
extern  bool_t xdr_ndmp_file(XDR *, ndmp_file*);
extern  bool_t xdr_ndmp_dir(XDR *, ndmp_dir*);
extern  bool_t xdr_ndmp_node(XDR *, ndmp_node*);
extern  bool_t xdr_ndmp_fh_add_unix_path_request_v2(XDR *, ndmp_fh_add_unix_path_request_v2*);
extern  bool_t xdr_ndmp_fh_add_unix_path_request_v3(XDR *, ndmp_fh_add_unix_path_request_v3*);
extern  bool_t xdr_ndmp_fh_add_file_request_v4(XDR *, ndmp_fh_add_file_request_v4*);
extern  bool_t xdr_ndmp_fh_add_unix_dir_request_v2(XDR *, ndmp_fh_add_unix_dir_request_v2*);
extern  bool_t xdr_ndmp_fh_add_unix_dir_request_v3(XDR *, ndmp_fh_add_unix_dir_request_v3*);
extern  bool_t xdr_ndmp_fh_add_dir_request_v4(XDR *, ndmp_fh_add_dir_request_v4*);
extern  bool_t xdr_ndmp_fh_add_unix_node_request_v2(XDR *, ndmp_fh_add_unix_node_request_v2*);
extern  bool_t xdr_ndmp_fh_add_unix_node_request_v3(XDR *, ndmp_fh_add_unix_node_request_v3*);
extern  bool_t xdr_ndmp_fh_add_node_request_v4(XDR *, ndmp_fh_add_node_request_v4*);

#ifdef __cplusplus
}
#endif

#endif /* !_NDMP_H_RPCGEN */
